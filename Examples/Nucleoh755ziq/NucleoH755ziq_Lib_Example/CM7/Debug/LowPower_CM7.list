
LowPower_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac8  08006ac8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad0  08006ad0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006ae8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006b48  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000780  240000d0  08006ba8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000850  08006ba8  00020850  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019790  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002dc9  00000000  00000000  000398d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000010c8  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ce9  00000000  00000000  0003d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b31b  00000000  00000000  0003e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000168d5  00000000  00000000  0007976c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001832c4  00000000  00000000  00090041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000046b4  00000000  00000000  00213308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000009f  00000000  00000000  002179bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006a70 	.word	0x08006a70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006a70 	.word	0x08006a70

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fd63 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f851 	bl	80007c0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <main+0xa8>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <main+0xa8>)
 8000726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <main+0xa8>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800073c:	2000      	movs	r0, #0
 800073e:	f001 fd1f 	bl	8002180 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000742:	2100      	movs	r1, #0
 8000744:	2000      	movs	r0, #0
 8000746:	f001 fd35 	bl	80021b4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000750:	bf00      	nop
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <main+0xa8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d104      	bne.n	8000768 <main+0x58>
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	617a      	str	r2, [r7, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	dcf4      	bgt.n	8000752 <main+0x42>
if ( timeout < 0 )
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b00      	cmp	r3, #0
 800076c:	da01      	bge.n	8000772 <main+0x62>
{
Error_Handler();
 800076e:	f000 f9d7 	bl	8000b20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f96f 	bl	8000a54 <MX_GPIO_Init>
  MX_ETH_Init();
 8000776:	f000 f8a3 	bl	80008c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800077a:	f000 f8ed 	bl	8000958 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800077e:	f000 f937 	bl	80009f0 <MX_USB_OTG_FS_PCD_Init>

  /* Example usage of Lib */
  uint8_t tmp = OpenEPT_ED_Init();
 8000782:	f000 fbf5 	bl	8000f70 <OpenEPT_ED_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	74fb      	strb	r3, [r7, #19]
  if(tmp != 0) return 1;
 800078a:	7cfb      	ldrb	r3, [r7, #19]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <main+0x84>
 8000790:	2301      	movs	r3, #1
 8000792:	e00d      	b.n	80007b0 <main+0xa0>
  char *str = "Jopa\n";
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <main+0xac>)
 8000796:	60fb      	str	r3, [r7, #12]
  while (1) {
	  OpenEPT_ED_SetEPFast((uint8_t *)str, strlen(str));
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f7ff fd9d 	bl	80002d8 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	4619      	mov	r1, r3
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f000 fbf8 	bl	8000f98 <OpenEPT_ED_SetEPFast>
	  volatile int a = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
	  (void)a;
 80007ac:	687b      	ldr	r3, [r7, #4]
  while (1) {
 80007ae:	e7f3      	b.n	8000798 <main+0x88>
  }
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024400 	.word	0x58024400
 80007bc:	08006a88 	.word	0x08006a88

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	; 0x70
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	224c      	movs	r2, #76	; 0x4c
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 f921 	bl	8006a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2220      	movs	r2, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 f91b 	bl	8006a16 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e0:	2004      	movs	r0, #4
 80007e2:	f001 fe2b 	bl	800243c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <SystemClock_Config+0xf8>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <SystemClock_Config+0xf8>)
 80007f0:	f023 0301 	bic.w	r3, r3, #1
 80007f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <SystemClock_Config+0xf8>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <SystemClock_Config+0xfc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000808:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <SystemClock_Config+0xfc>)
 800080a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <SystemClock_Config+0xfc>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <SystemClock_Config+0xfc>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800082c:	2303      	movs	r3, #3
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000836:	2301      	movs	r3, #1
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	2302      	movs	r3, #2
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800084a:	2318      	movs	r3, #24
 800084c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000852:	2304      	movs	r3, #4
 8000854:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085a:	230c      	movs	r3, #12
 800085c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085e:	2300      	movs	r3, #0
 8000860:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe50 	bl	8002510 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000876:	f000 f953 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	233f      	movs	r3, #63	; 0x3f
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fa90 	bl	8002dc4 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xee>
  {
    Error_Handler();
 80008aa:	f000 f939 	bl	8000b20 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3770      	adds	r7, #112	; 0x70
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58000400 	.word	0x58000400
 80008bc:	58024800 	.word	0x58024800

080008c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ETH_Init+0x80>)
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_ETH_Init+0x84>)
 80008c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ETH_Init+0x88>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ETH_Init+0x88>)
 80008d8:	22e1      	movs	r2, #225	; 0xe1
 80008da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_ETH_Init+0x88>)
 80008de:	2200      	movs	r2, #0
 80008e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ETH_Init+0x88>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ETH_Init+0x88>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_ETH_Init+0x80>)
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_ETH_Init+0x88>)
 80008f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_ETH_Init+0x80>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_ETH_Init+0x80>)
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_ETH_Init+0x8c>)
 80008fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_ETH_Init+0x80>)
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <MX_ETH_Init+0x90>)
 8000904:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_ETH_Init+0x80>)
 8000908:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800090c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ETH_Init+0x80>)
 8000910:	f000 fe20 	bl	8001554 <HAL_ETH_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800091a:	f000 f901 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800091e:	2238      	movs	r2, #56	; 0x38
 8000920:	2100      	movs	r1, #0
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_ETH_Init+0x94>)
 8000924:	f006 f877 	bl	8006a16 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_ETH_Init+0x94>)
 800092a:	2221      	movs	r2, #33	; 0x21
 800092c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_ETH_Init+0x94>)
 8000930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000934:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_ETH_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	24000124 	.word	0x24000124
 8000944:	40028000 	.word	0x40028000
 8000948:	2400074c 	.word	0x2400074c
 800094c:	24000070 	.word	0x24000070
 8000950:	24000010 	.word	0x24000010
 8000954:	240000ec 	.word	0x240000ec

08000958 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <MX_USART3_UART_Init+0x94>)
 8000960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 80009a2:	f004 fbc7 	bl	8005134 <HAL_UART_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f8b8 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 80009b4:	f005 fc5d 	bl	8006272 <HAL_UARTEx_SetTxFifoThreshold>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 f8af 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f005 fc92 	bl	80062ee <HAL_UARTEx_SetRxFifoThreshold>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009d0:	f000 f8a6 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_USART3_UART_Init+0x90>)
 80009d6:	f005 fc13 	bl	8006200 <HAL_UARTEx_DisableFifoMode>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f89e 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240001d4 	.word	0x240001d4
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2209      	movs	r2, #9
 80009fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	f001 fbd0 	bl	80021dc <HAL_PCD_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a42:	f000 f86d 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000268 	.word	0x24000268
 8000a50:	40080000 	.word	0x40080000

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	58024400 	.word	0x58024400

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a59      	ldr	r2, [pc, #356]	; (8000ce4 <HAL_ETH_MspInit+0x184>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 80ab 	bne.w	8000cda <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8a:	4a57      	ldr	r2, [pc, #348]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b94:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba8:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bc0:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc6:	4a48      	ldr	r2, [pc, #288]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a39      	ldr	r2, [pc, #228]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c56:	2332      	movs	r3, #50	; 0x32
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c66:	230b      	movs	r3, #11
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481e      	ldr	r0, [pc, #120]	; (8000cec <HAL_ETH_MspInit+0x18c>)
 8000c72:	f001 f8a3 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c76:	2386      	movs	r3, #134	; 0x86
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_ETH_MspInit+0x190>)
 8000c92:	f001 f893 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <HAL_ETH_MspInit+0x194>)
 8000cb4:	f001 f882 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <HAL_ETH_MspInit+0x198>)
 8000cd6:	f001 f871 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3738      	adds	r7, #56	; 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40028000 	.word	0x40028000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58020000 	.word	0x58020000
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58021800 	.word	0x58021800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ba      	sub	sp, #232	; 0xe8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	22c0      	movs	r2, #192	; 0xc0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fe7a 	bl	8006a16 <memset>
  if(huart->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d146      	bne.n	8000dba <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	f04f 0202 	mov.w	r2, #2
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fbca 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d4e:	f7ff fee7 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0xd0>)
 8000db6:	f001 f801 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	37e8      	adds	r7, #232	; 0xe8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020c00 	.word	0x58020c00

08000dd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ba      	sub	sp, #232	; 0xe8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	22c0      	movs	r2, #192	; 0xc0
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 fe10 	bl	8006a16 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <HAL_PCD_MspInit+0xec>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d159      	bne.n	8000eb4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fb5f 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e24:	f7ff fe7c 	bl	8000b20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e28:	f001 fb62 	bl	80024f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e64:	230a      	movs	r3, #10
 8000e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <HAL_PCD_MspInit+0xf4>)
 8000e72:	f000 ffa3 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <HAL_PCD_MspInit+0xf4>)
 8000e92:	f000 ff93 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0xf0>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37e8      	adds	r7, #232	; 0xe8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40080000 	.word	0x40080000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f9d6 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff fb60 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f005 fd6d 	bl	8006a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fbdf 	bl	8000710 <main>
  bx  lr
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f5c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f60:	08006ad8 	.word	0x08006ad8
  ldr r2, =_sbss
 8000f64:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f68:	24000850 	.word	0x24000850

08000f6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <OpenEPT_ED_Init>:
 static uint8_t OPENEPT_RECEIVE_BUFFER[OPENEPT_CONF_RECEIVE_BUFFER_SIZE];
 
 
 
 int OpenEPT_ED_Init()
 {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
     if(OpenEPT_ED_Platform_Init() != 0) return OPEN_EPT_STATUS_ERROR;
 8000f74:	f000 f84e 	bl	8001014 <OpenEPT_ED_Platform_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <OpenEPT_ED_Init+0x12>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e005      	b.n	8000f8e <OpenEPT_ED_Init+0x1e>
     memset(OPENEPT_RECEIVE_BUFFER, 0, OPENEPT_CONF_RECEIVE_BUFFER_SIZE);
 8000f82:	2264      	movs	r2, #100	; 0x64
 8000f84:	2100      	movs	r1, #0
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <OpenEPT_ED_Init+0x24>)
 8000f88:	f005 fd45 	bl	8006a16 <memset>
     return OPEN_EPT_STATUS_OK;
 8000f8c:	2300      	movs	r3, #0
 }
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	24000754 	.word	0x24000754

08000f98 <OpenEPT_ED_SetEPFast>:
     return OPEN_EPT_STATUS_ERROR;
 }
 
 
 int OpenEPT_ED_SetEPFast(uint8_t* epName, uint32_t epNameSize)
 {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
     if(OpenEPT_ED_Platform_SyncToogle() != 0) return OPEN_EPT_STATUS_ERROR;
 8000fa2:	f000 f903 	bl	80011ac <OpenEPT_ED_Platform_SyncToogle>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <OpenEPT_ED_SetEPFast+0x18>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e02d      	b.n	800100c <OpenEPT_ED_SetEPFast+0x74>
     uint32_t cnt = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
     //Send EP message header
     if(OpenEPT_ED_Platform_Send('1') != 0) return OPEN_EPT_STATUS_ERROR;
 8000fb4:	2031      	movs	r0, #49	; 0x31
 8000fb6:	f000 f8e1 	bl	800117c <OpenEPT_ED_Platform_Send>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <OpenEPT_ED_SetEPFast+0x2c>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e023      	b.n	800100c <OpenEPT_ED_SetEPFast+0x74>
     if(OpenEPT_ED_Platform_Send(':') != 0) return OPEN_EPT_STATUS_ERROR;
 8000fc4:	203a      	movs	r0, #58	; 0x3a
 8000fc6:	f000 f8d9 	bl	800117c <OpenEPT_ED_Platform_Send>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d010      	beq.n	8000ff2 <OpenEPT_ED_SetEPFast+0x5a>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e01b      	b.n	800100c <OpenEPT_ED_SetEPFast+0x74>
     
     //Send EP message content
     while(cnt < epNameSize)
     {
         if(OpenEPT_ED_Platform_Send((char)epName[cnt]) != 0) return OPEN_EPT_STATUS_ERROR;
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f8cd 	bl	800117c <OpenEPT_ED_Platform_Send>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <OpenEPT_ED_SetEPFast+0x54>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00f      	b.n	800100c <OpenEPT_ED_SetEPFast+0x74>
         cnt++;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
     while(cnt < epNameSize)
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d3ec      	bcc.n	8000fd4 <OpenEPT_ED_SetEPFast+0x3c>
     }
     if(OpenEPT_ED_Platform_Send('\r') != 0) return OPEN_EPT_STATUS_ERROR;
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f000 f8be 	bl	800117c <OpenEPT_ED_Platform_Send>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <OpenEPT_ED_SetEPFast+0x72>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <OpenEPT_ED_SetEPFast+0x74>
     return OPEN_EPT_STATUS_OK;
 800100a:	2300      	movs	r3, #0
 
 }
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <OpenEPT_ED_Platform_Init>:
 *
 * @return OPEN_EPT_STATUS_OK if initialization is successful,
 *         OPEN_EPT_STATUS_ERROR if an error occurs during UART initialization.
 */
int OpenEPT_ED_Platform_Init()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
     __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock for GPIOA (change as needed)
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

    // Configure GPIO pin PA5
    GPIO_InitStruct.Pin = GPIO_PIN_5; // Set pin PA5
 8001048:	2320      	movs	r3, #32
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull mode
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Initialize GPIOA
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <OpenEPT_ED_Platform_Init+0x158>)
 8001060:	f000 feac 	bl	8001dbc <HAL_GPIO_Init>
    memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitTypeDef));
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2214      	movs	r2, #20
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fcd2 	bl	8006a16 <memset>

    __HAL_RCC_USART2_CLK_ENABLE(); // Enable clock for USART2
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 8001074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001078:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 8001084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock for GPIOA
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE(); // Enable clock for GPIOD
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <OpenEPT_ED_Platform_Init+0x154>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

    // Configure PD5 (TX) and PA3 (RX) for UART2
    GPIO_InitStruct.Pin = GPIO_PIN_3; // Set pin PA3
 80010cc:	2308      	movs	r3, #8
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function mode for TX
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH; // Very high speed
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // Alternate function for USART2
 80010dc:	2307      	movs	r3, #7
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Initialize GPIOA
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4821      	ldr	r0, [pc, #132]	; (800116c <OpenEPT_ED_Platform_Init+0x158>)
 80010e8:	f000 fe68 	bl	8001dbc <HAL_GPIO_Init>

    memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitTypeDef)); // Reset structure
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2214      	movs	r2, #20
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fc8e 	bl	8006a16 <memset>
    GPIO_InitStruct.Pin = GPIO_PIN_5; // Set pin PD5
 80010fa:	2320      	movs	r3, #32
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function mode
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH; // Very high speed
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // Alternate function for USART2
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct); // Initialize GPIOD
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4816      	ldr	r0, [pc, #88]	; (8001170 <OpenEPT_ED_Platform_Init+0x15c>)
 8001116:	f000 fe51 	bl	8001dbc <HAL_GPIO_Init>

    // UART2 configuration
    huart2.Instance = USART2; // Select USART2
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <OpenEPT_ED_Platform_Init+0x164>)
 800111e:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200; // Baud rate
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 8001122:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001126:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B; // 8 data bits
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1; // 1 stop bit
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE; // No parity
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX; // TX and RX enabled
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 800113c:	220c      	movs	r2, #12
 800113e:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE; // No hardware flow control
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16; // Oversampling by 16
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <OpenEPT_ED_Platform_Init+0x160>)
 800114e:	f003 fff1 	bl	8005134 <HAL_UART_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <OpenEPT_ED_Platform_Init+0x148>
        // Initialization error
        return OPEN_EPT_STATUS_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <OpenEPT_ED_Platform_Init+0x14a>
    }
    return OPEN_EPT_STATUS_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58024400 	.word	0x58024400
 800116c:	58020000 	.word	0x58020000
 8001170:	58020c00 	.word	0x58020c00
 8001174:	240007b8 	.word	0x240007b8
 8001178:	40004400 	.word	0x40004400

0800117c <OpenEPT_ED_Platform_Send>:
 * @param character The character to be transmitted.
 * @return OPEN_EPT_STATUS_OK on successful transmission,
 *         OPEN_EPT_STATUS_ERROR on transmission error.
 */
int OpenEPT_ED_Platform_Send(char character)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
    if(HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, HAL_MAX_DELAY) != HAL_OK) return OPEN_EPT_STATUS_ERROR;
 8001186:	1df9      	adds	r1, r7, #7
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	2201      	movs	r2, #1
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <OpenEPT_ED_Platform_Send+0x2c>)
 8001190:	f004 f820 	bl	80051d4 <HAL_UART_Transmit>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <OpenEPT_ED_Platform_Send+0x22>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <OpenEPT_ED_Platform_Send+0x24>
    return OPEN_EPT_STATUS_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240007b8 	.word	0x240007b8

080011ac <OpenEPT_ED_Platform_SyncToogle>:
 *
 * @return OPEN_EPT_STATUS_OK if the pin is reset successfully,
 *         OPEN_EPT_STATUS_ERROR if the pin state is incorrect.
 */
int OpenEPT_ED_Platform_SyncToogle()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <OpenEPT_ED_Platform_SyncToogle+0x30>)
 80011b8:	f000 ffc8 	bl	800214c <HAL_GPIO_WritePin>
    GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80011bc:	2120      	movs	r1, #32
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <OpenEPT_ED_Platform_SyncToogle+0x30>)
 80011c0:	f000 ffac 	bl	800211c <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
    return (state == GPIO_PIN_RESET) ? OPEN_EPT_STATUS_OK : OPEN_EPT_STATUS_ERROR;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58020000 	.word	0x58020000

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f982 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ec:	f001 ffa0 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_Init+0x68>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	4913      	ldr	r1, [pc, #76]	; (800124c <HAL_Init+0x6c>)
 80011fe:	5ccb      	ldrb	r3, [r1, r3]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_Init+0x6c>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_Init+0x70>)
 8001222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_Init+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f814 	bl	8001258 <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e002      	b.n	8001240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fc77 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58024400 	.word	0x58024400
 800124c:	08006a90 	.word	0x08006a90
 8001250:	24000004 	.word	0x24000004
 8001254:	24000000 	.word	0x24000000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_InitTick+0x60>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e021      	b.n	80012b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0x64>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_InitTick+0x60>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f959 	bl	800153a <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f931 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x68>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400000c 	.word	0x2400000c
 80012bc:	24000000 	.word	0x24000000
 80012c0:	24000008 	.word	0x24000008

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2400000c 	.word	0x2400000c
 80012e8:	2400084c 	.word	0x2400084c

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2400084c 	.word	0x2400084c

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2400000c 	.word	0x2400000c

0800134c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetREVID+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0c1b      	lsrs	r3, r3, #16
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	5c001000 	.word	0x5c001000

08001364 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58000400 	.word	0x58000400

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff5e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffb2 	bl	80014ac <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0e3      	b.n	800172e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2223      	movs	r2, #35	; 0x23
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff faf1 	bl	8000b60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_ETH_Init+0x1e4>)
 8001580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001584:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <HAL_ETH_Init+0x1e4>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_ETH_Init+0x1e4>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a1b      	ldrb	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fedd 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
 80015aa:	e003      	b.n	80015b4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015b0:	f7ff fed8 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <HAL_ETH_Init+0x1e8>)
 80015b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d0:	f7ff fe8c 	bl	80012ec <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015d6:	e011      	b.n	80015fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015d8:	f7ff fe88 	bl	80012ec <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e6:	d909      	bls.n	80015fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	22e0      	movs	r2, #224	; 0xe0
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e098      	b.n	800172e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e4      	bne.n	80015d8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f89e 	bl	8001750 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001614:	f001 ff06 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8001618:	4603      	mov	r3, r0
 800161a:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_ETH_Init+0x1ec>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3a01      	subs	r2, #1
 8001628:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fa81 	bl	8001b34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800163e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800164a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800164e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	22e0      	movs	r2, #224	; 0xe0
 800166a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e05d      	b.n	800172e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_ETH_Init+0x1f0>)
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6952      	ldr	r2, [r2, #20]
 8001686:	0051      	lsls	r1, r2, #1
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	430b      	orrs	r3, r1
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fae9 	bl	8001c6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fb2f 	bl	8001d00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	3305      	adds	r3, #5
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	021a      	lsls	r2, r3, #8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	3304      	adds	r3, #4
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	3303      	adds	r3, #3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_ETH_Init+0x1f4>)
 8001702:	430b      	orrs	r3, r1
 8001704:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_ETH_Init+0x1f8>)
 8001716:	430b      	orrs	r3, r1
 8001718:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2210      	movs	r2, #16
 8001728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	58024400 	.word	0x58024400
 800173c:	58000400 	.word	0x58000400
 8001740:	431bde83 	.word	0x431bde83
 8001744:	ffff8001 	.word	0xffff8001
 8001748:	0c020060 	.word	0x0c020060
 800174c:	0c20c000 	.word	0x0c20c000

08001750 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001760:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001768:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800176a:	f001 fe5b 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800176e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d804      	bhi.n	8001782 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e022      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d204      	bcs.n	8001794 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e019      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d915      	bls.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_ETH_SetMDIOClockRange+0x98>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d804      	bhi.n	80017ae <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e00c      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d804      	bhi.n	80017c0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e003      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80017c6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	02160ebf 	.word	0x02160ebf
 80017e0:	03938700 	.word	0x03938700
 80017e4:	05f5e0ff 	.word	0x05f5e0ff
 80017e8:	08f0d17f 	.word	0x08f0d17f
 80017ec:	0ee6b27f 	.word	0x0ee6b27f

080017f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001802:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800180a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	7b5b      	ldrb	r3, [r3, #13]
 8001818:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800181a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	7b9b      	ldrb	r3, [r3, #14]
 8001820:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800182a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	7c12      	ldrb	r2, [r2, #16]
 8001830:	2a00      	cmp	r2, #0
 8001832:	d102      	bne.n	800183a <ETH_SetMACConfig+0x4a>
 8001834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x4c>
 800183a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800183c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	7c52      	ldrb	r2, [r2, #17]
 8001842:	2a00      	cmp	r2, #0
 8001844:	d102      	bne.n	800184c <ETH_SetMACConfig+0x5c>
 8001846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184a:	e000      	b.n	800184e <ETH_SetMACConfig+0x5e>
 800184c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7c9b      	ldrb	r3, [r3, #18]
 8001854:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001856:	431a      	orrs	r2, r3
               macconf->Speed |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800185c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7f1b      	ldrb	r3, [r3, #28]
 8001868:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7f5b      	ldrb	r3, [r3, #29]
 8001870:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001872:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	7f92      	ldrb	r2, [r2, #30]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d102      	bne.n	8001882 <ETH_SetMACConfig+0x92>
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x94>
 8001882:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001884:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7fdb      	ldrb	r3, [r3, #31]
 800188a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800188c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d102      	bne.n	800189e <ETH_SetMACConfig+0xae>
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0xb0>
 800189e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <ETH_SetMACConfig+0x22c>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d102      	bne.n	8001902 <ETH_SetMACConfig+0x112>
 80018fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001900:	e000      	b.n	8001904 <ETH_SetMACConfig+0x114>
 8001902:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001904:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <ETH_SetMACConfig+0x230>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001928:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <ETH_SetMACConfig+0x234>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	430b      	orrs	r3, r1
 8001944:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800194c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001952:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800195a:	2a00      	cmp	r2, #0
 800195c:	d101      	bne.n	8001962 <ETH_SetMACConfig+0x172>
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	e000      	b.n	8001964 <ETH_SetMACConfig+0x174>
 8001962:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001964:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001976:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800198c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001994:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a2:	f023 0103 	bic.w	r1, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d101      	bne.n	80019de <ETH_SetMACConfig+0x1ee>
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x1f0>
 80019de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80019e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80019f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	00048083 	.word	0x00048083
 8001a20:	c0f88000 	.word	0xc0f88000
 8001a24:	fffffef0 	.word	0xfffffef0

08001a28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <ETH_SetDMAConfig+0xf8>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6811      	ldr	r1, [r2, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a4e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <ETH_SetDMAConfig+0xfc>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a80:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	7b5b      	ldrb	r3, [r3, #13]
 8001a86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <ETH_SetDMAConfig+0x100>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7d1b      	ldrb	r3, [r3, #20]
 8001ab8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7f5b      	ldrb	r3, [r3, #29]
 8001ac0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <ETH_SetDMAConfig+0x104>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7f1b      	ldrb	r3, [r3, #28]
 8001aea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <ETH_SetDMAConfig+0x108>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b10:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	ffff87fd 	.word	0xffff87fd
 8001b24:	ffff2ffe 	.word	0xffff2ffe
 8001b28:	fffec000 	.word	0xfffec000
 8001b2c:	ffc0efef 	.word	0xffc0efef
 8001b30:	7fc0ffff 	.word	0x7fc0ffff

08001b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0a4      	sub	sp, #144	; 0x90
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b42:	2300      	movs	r3, #0
 8001b44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fde6 	bl	80017f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fee1 	bl	8001a28 <ETH_SetDMAConfig>
}
 8001c66:	bf00      	nop
 8001c68:	3790      	adds	r7, #144	; 0x90
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e01d      	b.n	8001cb8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	3206      	adds	r2, #6
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d9de      	bls.n	8001c7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e023      	b.n	8001d56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d9d8      	bls.n	8001d0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	461a      	mov	r2, r3
 8001d84:	2303      	movs	r3, #3
 8001d86:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_GPIO_Init+0x234>)
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dce:	e194      	b.n	80020fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8186 	beq.w	80020f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x44>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80e0 	beq.w	80020f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_GPIO_Init+0x23c>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_GPIO_Init+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d052      	beq.n	8002024 <HAL_GPIO_Init+0x268>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x244>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d031      	beq.n	8001fea <HAL_GPIO_Init+0x22e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_GPIO_Init+0x248>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02b      	beq.n	8001fe6 <HAL_GPIO_Init+0x22a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_GPIO_Init+0x24c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d025      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_GPIO_Init+0x250>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_GPIO_Init+0x254>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_GPIO_Init+0x258>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_GPIO_Init+0x25c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_GPIO_Init+0x260>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_GPIO_Init+0x264>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fc6:	2309      	movs	r3, #9
 8001fc8:	e02d      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fca:	230a      	movs	r3, #10
 8001fcc:	e02b      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e029      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e027      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e025      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e023      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e01f      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e01d      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e01b      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fee:	bf00      	nop
 8001ff0:	58000080 	.word	0x58000080
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58000400 	.word	0x58000400
 8001ffc:	58020000 	.word	0x58020000
 8002000:	58020400 	.word	0x58020400
 8002004:	58020800 	.word	0x58020800
 8002008:	58020c00 	.word	0x58020c00
 800200c:	58021000 	.word	0x58021000
 8002010:	58021400 	.word	0x58021400
 8002014:	58021800 	.word	0x58021800
 8002018:	58021c00 	.word	0x58021c00
 800201c:	58022000 	.word	0x58022000
 8002020:	58022400 	.word	0x58022400
 8002024:	2300      	movs	r3, #0
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002036:	4938      	ldr	r1, [pc, #224]	; (8002118 <HAL_GPIO_Init+0x35c>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800206a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f ae63 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3724      	adds	r7, #36	; 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	58000400 	.word	0x58000400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002188:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_HSEM_FastTake+0x2c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3320      	adds	r3, #32
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_HSEM_FastTake+0x30>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	58026400 	.word	0x58026400
 80021b0:	80000300 	.word	0x80000300

080021b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021be:	4906      	ldr	r1, [pc, #24]	; (80021d8 <HAL_HSEM_Release+0x24>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	58026400 	.word	0x58026400

080021dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0fe      	b.n	80023ec <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fde4 	bl	8000dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f004 f969 	bl	80064ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7c1a      	ldrb	r2, [r3, #16]
 8002222:	f88d 2000 	strb.w	r2, [sp]
 8002226:	3304      	adds	r3, #4
 8002228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222a:	f004 f8ed 	bl	8006408 <USB_CoreInit>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0d5      	b.n	80023ec <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f004 f961 	bl	800650e <USB_SetCurrentMode>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0c6      	b.n	80023ec <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e04a      	b.n	80022fa <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3315      	adds	r3, #21
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3314      	adds	r3, #20
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	b298      	uxth	r0, r3
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	332e      	adds	r3, #46	; 0x2e
 80022a0:	4602      	mov	r2, r0
 80022a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3318      	adds	r3, #24
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	331c      	adds	r3, #28
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3320      	adds	r3, #32
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3324      	adds	r3, #36	; 0x24
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3af      	bcc.n	8002264 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e044      	b.n	8002394 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f203 2355 	addw	r3, r3, #597	; 0x255
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	3301      	adds	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	429a      	cmp	r2, r3
 800239c:	d3b5      	bcc.n	800230a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7c1a      	ldrb	r2, [r3, #16]
 80023a6:	f88d 2000 	strb.w	r2, [sp]
 80023aa:	3304      	adds	r3, #4
 80023ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ae:	f004 f8fb 	bl	80065a8 <USB_DevInit>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e013      	b.n	80023ec <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7b1b      	ldrb	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f80a 	bl	80023f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 fab6 	bl	8006956 <USB_DevDisconnect>

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_PCDEx_ActivateLPM+0x44>)
 8002424:	4313      	orrs	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	10000003 	.word	0x10000003

0800243c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	2b06      	cmp	r3, #6
 800244e:	d00a      	beq.n	8002466 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e040      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e03e      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4313      	orrs	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002476:	f7fe ff39 	bl	80012ec <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800247c:	e009      	b.n	8002492 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800247e:	f7fe ff35 	bl	80012ec <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e028      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d1ee      	bne.n	800247e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b1e      	cmp	r3, #30
 80024a4:	d008      	beq.n	80024b8 <HAL_PWREx_ConfigSupply+0x7c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b2e      	cmp	r3, #46	; 0x2e
 80024aa:	d005      	beq.n	80024b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b1d      	cmp	r3, #29
 80024b0:	d002      	beq.n	80024b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b2d      	cmp	r3, #45	; 0x2d
 80024b6:	d114      	bne.n	80024e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024b8:	f7fe ff18 	bl	80012ec <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024be:	e009      	b.n	80024d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024c0:	f7fe ff14 	bl	80012ec <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ce:	d901      	bls.n	80024d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_PWREx_ConfigSupply+0xb0>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d1ee      	bne.n	80024c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	58024800 	.word	0x58024800

080024f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f000 bc48 	b.w	8002db4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8088 	beq.w	8002642 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b99      	ldr	r3, [pc, #612]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b96      	ldr	r3, [pc, #600]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b10      	cmp	r3, #16
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x48>
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b18      	cmp	r3, #24
 800254c:	d111      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d06d      	beq.n	8002640 <HAL_RCC_OscConfig+0x130>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d169      	bne.n	8002640 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 bc21 	b.w	8002db4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x7a>
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a85      	ldr	r2, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e02e      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x9c>
 8002592:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7d      	ldr	r2, [pc, #500]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0xc0>
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a74      	ldr	r2, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 80025d0:	4b71      	ldr	r3, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a70      	ldr	r2, [pc, #448]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6d      	ldr	r2, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe7c 	bl	80012ec <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fe78 	bl	80012ec <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e3d4      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260a:	4b63      	ldr	r3, [pc, #396]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe8>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fe68 	bl	80012ec <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fe64 	bl	80012ec <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e3c0      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x110>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80ca 	beq.w	80027e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002658:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800265a:	4b4f      	ldr	r3, [pc, #316]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_RCC_OscConfig+0x166>
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b18      	cmp	r3, #24
 800266a:	d156      	bne.n	800271a <HAL_RCC_OscConfig+0x20a>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d151      	bne.n	800271a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002676:	4b48      	ldr	r3, [pc, #288]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x17e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e392      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0219 	bic.w	r2, r3, #25
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	493f      	ldr	r1, [pc, #252]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe24 	bl	80012ec <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fe20 	bl	80012ec <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e37c      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c6:	f7fe fe41 	bl	800134c <HAL_GetREVID>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d817      	bhi.n	8002704 <HAL_RCC_OscConfig+0x1f4>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d108      	bne.n	80026ee <HAL_RCC_OscConfig+0x1de>
 80026dc:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026e4:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	e07a      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	031b      	lsls	r3, r3, #12
 80026fc:	4926      	ldr	r1, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002702:	e06f      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4921      	ldr	r1, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	e064      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d047      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0219 	bic.w	r2, r3, #25
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fdda 	bl	80012ec <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7fe fdd6 	bl	80012ec <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e332      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	f7fe fdf7 	bl	800134c <HAL_GetREVID>
 800275e:	4603      	mov	r3, r0
 8002760:	f241 0203 	movw	r2, #4099	; 0x1003
 8002764:	4293      	cmp	r3, r2
 8002766:	d819      	bhi.n	800279c <HAL_RCC_OscConfig+0x28c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d108      	bne.n	8002782 <HAL_RCC_OscConfig+0x272>
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	6053      	str	r3, [r2, #4]
 8002780:	e030      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	4901      	ldr	r1, [pc, #4]	; (8002798 <HAL_RCC_OscConfig+0x288>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
 8002796:	e025      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
 8002798:	58024400 	.word	0x58024400
 800279c:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4997      	ldr	r1, [pc, #604]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b95      	ldr	r3, [pc, #596]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fd95 	bl	80012ec <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fd91 	bl	80012ec <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2ed      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d8:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a9 	beq.w	8002944 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fc:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d007      	beq.n	8002818 <HAL_RCC_OscConfig+0x308>
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b18      	cmp	r3, #24
 800280c:	d13a      	bne.n	8002884 <HAL_RCC_OscConfig+0x374>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d135      	bne.n	8002884 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002818:	4b7b      	ldr	r3, [pc, #492]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x320>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d001      	beq.n	8002830 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e2c1      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002830:	f7fe fd8c 	bl	800134c <HAL_GetREVID>
 8002834:	4603      	mov	r3, r0
 8002836:	f241 0203 	movw	r2, #4099	; 0x1003
 800283a:	4293      	cmp	r3, r2
 800283c:	d817      	bhi.n	800286e <HAL_RCC_OscConfig+0x35e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	2b20      	cmp	r3, #32
 8002844:	d108      	bne.n	8002858 <HAL_RCC_OscConfig+0x348>
 8002846:	4b70      	ldr	r3, [pc, #448]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002854:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002856:	e075      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	4968      	ldr	r1, [pc, #416]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286c:	e06a      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	061b      	lsls	r3, r3, #24
 800287c:	4962      	ldr	r1, [pc, #392]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002882:	e05f      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d042      	beq.n	8002912 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fd28 	bl	80012ec <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028a0:	f7fe fd24 	bl	80012ec <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e280      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b2:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028be:	f7fe fd45 	bl	800134c <HAL_GetREVID>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d817      	bhi.n	80028fc <HAL_RCC_OscConfig+0x3ec>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d108      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3d6>
 80028d4:	4b4c      	ldr	r3, [pc, #304]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028e2:	6053      	str	r3, [r2, #4]
 80028e4:	e02e      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	4944      	ldr	r1, [pc, #272]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 80028fa:	e023      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
 80028fc:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	493f      	ldr	r1, [pc, #252]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e018      	b.n	8002944 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fce5 	bl	80012ec <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002926:	f7fe fce1 	bl	80012ec <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e23d      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d036      	beq.n	80029be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d019      	beq.n	800298c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fcc2 	bl	80012ec <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fcbe 	bl	80012ec <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e21a      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x45c>
 800298a:	e018      	b.n	80029be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fca8 	bl	80012ec <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fca4 	bl	80012ec <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e200      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d039      	beq.n	8002a3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029de:	f7fe fc85 	bl	80012ec <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e6:	f7fe fc81 	bl	80012ec <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1dd      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
 8002a04:	e01b      	b.n	8002a3e <HAL_RCC_OscConfig+0x52e>
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a0c:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a9a      	ldr	r2, [pc, #616]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fc68 	bl	80012ec <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a20:	f7fe fc64 	bl	80012ec <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1c0      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a32:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8081 	beq.w	8002b4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a8b      	ldr	r2, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fc48 	bl	80012ec <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fc44 	bl	80012ec <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1a0      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x770>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x584>
 8002a86:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
 8002a92:	e02d      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5a6>
 8002a9c:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c8>
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a6b      	ldr	r2, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0x5e0>
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fbf8 	bl	80012ec <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe fbf4 	bl	80012ec <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e14e      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b16:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0ee      	beq.n	8002b00 <HAL_RCC_OscConfig+0x5f0>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe fbe2 	bl	80012ec <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fbde 	bl	80012ec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e138      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ee      	bne.n	8002b2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 812d 	beq.w	8002db2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b60:	2b18      	cmp	r3, #24
 8002b62:	f000 80bd 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f040 809e 	bne.w	8002cac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fbb6 	bl	80012ec <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fbb2 	bl	80012ec <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e10e      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_OscConfig+0x774>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4931      	ldr	r1, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	628b      	str	r3, [r1, #40]	; 0x28
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	3b01      	subs	r3, #1
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bec:	4923      	ldr	r1, [pc, #140]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x778>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c0a:	00d2      	lsls	r2, r2, #3
 8002c0c:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f023 020c 	bic.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4917      	ldr	r1, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f023 0202 	bic.w	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	4912      	ldr	r1, [pc, #72]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fb3b 	bl	80012ec <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c78:	e011      	b.n	8002c9e <HAL_RCC_OscConfig+0x78e>
 8002c7a:	bf00      	nop
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58024800 	.word	0x58024800
 8002c84:	fffffc0c 	.word	0xfffffc0c
 8002c88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fb2e 	bl	80012ec <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e08a      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x77c>
 8002caa:	e082      	b.n	8002db2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fb18 	bl	80012ec <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fb14 	bl	80012ec <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e070      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x7b0>
 8002cde:	e068      	b.n	8002db2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ce6:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d031      	beq.n	8002d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d12a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d122      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0a5b      	lsrs	r3, r3, #9
 8002d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d108      	bne.n	8002d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e02b      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d01f      	beq.n	8002db2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7e:	f7fe fab5 	bl	80012ec <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d84:	bf00      	nop
 8002d86:	f7fe fab1 	bl	80012ec <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d0f9      	beq.n	8002d86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_OscConfig+0x8b0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_RCC_OscConfig+0x8ac>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	; 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	ffff0007 	.word	0xffff0007

08002dc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e19c      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b87      	ldr	r3, [pc, #540]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4985      	ldr	r1, [pc, #532]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e184      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d908      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e24:	4b78      	ldr	r3, [pc, #480]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4975      	ldr	r1, [pc, #468]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	496a      	ldr	r1, [pc, #424]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e80:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	495e      	ldr	r1, [pc, #376]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4953      	ldr	r1, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d908      	bls.n	8002eee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4947      	ldr	r1, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d055      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4940      	ldr	r1, [pc, #256]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f14:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d121      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0f6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0ea      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0de      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f76:	f7fe f9b9 	bl	80012ec <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7e:	f7fe f9b5 	bl	80012ec <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0be      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d1eb      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d208      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d214      	bcs.n	800300c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 020f 	bic.w	r2, r3, #15
 8002fea:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e086      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
 8003004:	52002000 	.word	0x52002000
 8003008:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003028:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4939      	ldr	r1, [pc, #228]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003036:	4313      	orrs	r3, r2
 8003038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	492e      	ldr	r1, [pc, #184]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003080:	429a      	cmp	r2, r3
 8003082:	d208      	bcs.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4922      	ldr	r1, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003092:	4313      	orrs	r3, r2
 8003094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d208      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4917      	ldr	r1, [pc, #92]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c4:	f000 f834 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4912      	ldr	r1, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x360>)
 80030fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_RCC_ClockConfig+0x364>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x368>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f8a6 	bl	8001258 <HAL_InitTick>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	08006a90 	.word	0x08006a90
 8003124:	24000004 	.word	0x24000004
 8003128:	24000000 	.word	0x24000000
 800312c:	24000008 	.word	0x24000008

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003136:	4bb3      	ldr	r3, [pc, #716]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313e:	2b18      	cmp	r3, #24
 8003140:	f200 8155 	bhi.w	80033ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	080031b1 	.word	0x080031b1
 8003150:	080033ef 	.word	0x080033ef
 8003154:	080033ef 	.word	0x080033ef
 8003158:	080033ef 	.word	0x080033ef
 800315c:	080033ef 	.word	0x080033ef
 8003160:	080033ef 	.word	0x080033ef
 8003164:	080033ef 	.word	0x080033ef
 8003168:	080033ef 	.word	0x080033ef
 800316c:	080031d7 	.word	0x080031d7
 8003170:	080033ef 	.word	0x080033ef
 8003174:	080033ef 	.word	0x080033ef
 8003178:	080033ef 	.word	0x080033ef
 800317c:	080033ef 	.word	0x080033ef
 8003180:	080033ef 	.word	0x080033ef
 8003184:	080033ef 	.word	0x080033ef
 8003188:	080033ef 	.word	0x080033ef
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080033ef 	.word	0x080033ef
 8003194:	080033ef 	.word	0x080033ef
 8003198:	080033ef 	.word	0x080033ef
 800319c:	080033ef 	.word	0x080033ef
 80031a0:	080033ef 	.word	0x080033ef
 80031a4:	080033ef 	.word	0x080033ef
 80031a8:	080033ef 	.word	0x080033ef
 80031ac:	080031e3 	.word	0x080031e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031bc:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	4a90      	ldr	r2, [pc, #576]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031ce:	e111      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d0:	4b8d      	ldr	r3, [pc, #564]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d2:	61bb      	str	r3, [r7, #24]
      break;
 80031d4:	e10e      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031d6:	4b8d      	ldr	r3, [pc, #564]	; (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031d8:	61bb      	str	r3, [r7, #24]
      break;
 80031da:	e10b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031dc:	4b8c      	ldr	r3, [pc, #560]	; (8003410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031de:	61bb      	str	r3, [r7, #24]
      break;
 80031e0:	e108      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031ec:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031f8:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003202:	4b80      	ldr	r3, [pc, #512]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80e1 	beq.w	80033e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f000 8083 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x204>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	f200 80a1 	bhi.w	8003378 <HAL_RCC_GetSysClockFreq+0x248>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x114>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d056      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003242:	e099      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a02 	vldr	s12, [r7, #8]
 800328e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032aa:	e087      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ee:	e065      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003312:	ed97 6a02 	vldr	s12, [r7, #8]
 8003316:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003332:	e043      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003346:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003356:	ed97 6a02 	vldr	s12, [r7, #8]
 800335a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003376:	e021      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	eddf 6a26 	vldr	s13, [pc, #152]	; 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	0a5b      	lsrs	r3, r3, #9
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e0:	ee17 3a90 	vmov	r3, s15
 80033e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f0:	61bb      	str	r3, [r7, #24]
      break;
 80033f2:	bf00      	nop
  }

  return sysclockfreq;
 80033f4:	69bb      	ldr	r3, [r7, #24]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	58024400 	.word	0x58024400
 8003408:	03d09000 	.word	0x03d09000
 800340c:	003d0900 	.word	0x003d0900
 8003410:	007a1200 	.word	0x007a1200
 8003414:	46000000 	.word	0x46000000
 8003418:	4c742400 	.word	0x4c742400
 800341c:	4a742400 	.word	0x4a742400
 8003420:	4af42400 	.word	0x4af42400

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800342a:	f7ff fe81 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490f      	ldr	r1, [pc, #60]	; (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 8003460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	08006a90 	.word	0x08006a90
 800347c:	24000004 	.word	0x24000004
 8003480:	24000000 	.word	0x24000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003488:	f7ff ffcc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	08006a90 	.word	0x08006a90

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034b4:	f7ff ffb6 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024400 	.word	0x58024400
 80034d8:	08006a90 	.word	0x08006a90

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b0ca      	sub	sp, #296	; 0x128
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003500:	2500      	movs	r5, #0
 8003502:	ea54 0305 	orrs.w	r3, r4, r5
 8003506:	d049      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003512:	d02f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003514:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003518:	d828      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351e:	d01a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003524:	d822      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d007      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003532:	4bb8      	ldr	r3, [pc, #736]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	4ab7      	ldr	r2, [pc, #732]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800353e:	e01a      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003544:	3308      	adds	r3, #8
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fc8f 	bl	8004e6c <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	3328      	adds	r3, #40	; 0x28
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fd36 	bl	8004fd0 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800357e:	4ba5      	ldr	r3, [pc, #660]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	4aa1      	ldr	r2, [pc, #644]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358e:	430b      	orrs	r3, r1
 8003590:	6513      	str	r3, [r2, #80]	; 0x50
 8003592:	e003      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035a8:	f04f 0900 	mov.w	r9, #0
 80035ac:	ea58 0309 	orrs.w	r3, r8, r9
 80035b0:	d047      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d82a      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d9 	.word	0x080035d9
 80035c8:	080035e7 	.word	0x080035e7
 80035cc:	080035fd 	.word	0x080035fd
 80035d0:	0800361b 	.word	0x0800361b
 80035d4:	0800361b 	.word	0x0800361b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d8:	4b8e      	ldr	r3, [pc, #568]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a8d      	ldr	r2, [pc, #564]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e4:	e01a      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ea:	3308      	adds	r3, #8
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 fc3c 	bl	8004e6c <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fa:	e00f      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003600:	3328      	adds	r3, #40	; 0x28
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fce3 	bl	8004fd0 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800361a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003624:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	f023 0107 	bic.w	r1, r3, #7
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4a78      	ldr	r2, [pc, #480]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003634:	430b      	orrs	r3, r1
 8003636:	6513      	str	r3, [r2, #80]	; 0x50
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800363e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800364e:	f04f 0b00 	mov.w	fp, #0
 8003652:	ea5a 030b 	orrs.w	r3, sl, fp
 8003656:	d04c      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d030      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d829      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800366a:	2bc0      	cmp	r3, #192	; 0xc0
 800366c:	d02d      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800366e:	2bc0      	cmp	r3, #192	; 0xc0
 8003670:	d825      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d018      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d821      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d007      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003682:	e01c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4b63      	ldr	r3, [pc, #396]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4a62      	ldr	r2, [pc, #392]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003690:	e01c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	3308      	adds	r3, #8
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fbe6 	bl	8004e6c <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	3328      	adds	r3, #40	; 0x28
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fc8d 	bl	8004fd0 <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036d4:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6513      	str	r3, [r2, #80]	; 0x50
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003708:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d053      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800371a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800371e:	d035      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003724:	d82e      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003726:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800372a:	d031      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800372c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003730:	d828      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	d01a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373c:	d822      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003746:	d007      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003748:	e01c      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a31      	ldr	r2, [pc, #196]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003756:	e01c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375c:	3308      	adds	r3, #8
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fb83 	bl	8004e6c <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800376c:	e011      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003772:	3328      	adds	r3, #40	; 0x28
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fc2a 	bl	8004fd0 <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6593      	str	r3, [r2, #88]	; 0x58
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d056      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e6:	d038      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ec:	d831      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f2:	d034      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f8:	d82b      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037fe:	d01d      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003804:	d825      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800380a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003810:	e01f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003812:	bf00      	nop
 8003814:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4ba2      	ldr	r3, [pc, #648]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4aa1      	ldr	r2, [pc, #644]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003824:	e01c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	3308      	adds	r3, #8
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fb1c 	bl	8004e6c <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800383a:	e011      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003840:	3328      	adds	r3, #40	; 0x28
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fbc3 	bl	8004fd0 <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003878:	4a8a      	ldr	r2, [pc, #552]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800389e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d03a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d01f      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038b2:	2b30      	cmp	r3, #48	; 0x30
 80038b4:	d819      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d00c      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d815      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d019      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d111      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a76      	ldr	r2, [pc, #472]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038d2:	e011      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d8:	3308      	adds	r3, #8
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fac5 	bl	8004e6c <RCCEx_PLL2_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	4a65      	ldr	r2, [pc, #404]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003910:	430b      	orrs	r3, r1
 8003912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800391a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800392a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003934:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d051      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003948:	d035      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800394a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394e:	d82e      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003954:	d031      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800395a:	d828      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d01a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	d822      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003970:	d007      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003972:	e01c      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003980:	e01c      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003986:	3308      	adds	r3, #8
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fa6e 	bl	8004e6c <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	3328      	adds	r3, #40	; 0x28
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 fb15 	bl	8004fd0 <RCCEx_PLL3_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ac:	e006      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039b4:	e002      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6513      	str	r3, [r2, #80]	; 0x50
 80039d8:	e003      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d056      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d033      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a12:	d82c      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a18:	d02f      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1e:	d826      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a24:	d02b      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a2a:	d820      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a30:	d012      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a36:	d81a      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d022      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d115      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a46:	3308      	adds	r3, #8
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fa0e 	bl	8004e6c <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a56:	e015      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5c:	3328      	adds	r3, #40	; 0x28
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fab5 	bl	8004fd0 <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a74:	e006      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a76:	bf00      	nop
 8003a78:	e004      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9a:	4a02      	ldr	r2, [pc, #8]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003aa2:	bf00      	nop
 8003aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	d055      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d033      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae2:	d82c      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d02f      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d826      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af4:	d02b      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003afa:	d820      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b00:	d012      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b06:	d81a      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d022      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b10:	d115      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f9a6 	bl	8004e6c <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b26:	e015      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	3328      	adds	r3, #40	; 0x28
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fa4d 	bl	8004fd0 <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b46:	bf00      	nop
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b5c:	4ba3      	ldr	r3, [pc, #652]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b6c:	4a9f      	ldr	r2, [pc, #636]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6593      	str	r3, [r2, #88]	; 0x58
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d037      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bac:	d816      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a8b      	ldr	r2, [pc, #556]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00f      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f94c 	bl	8004e6c <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bee:	4b7f      	ldr	r3, [pc, #508]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a7b      	ldr	r2, [pc, #492]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6513      	str	r3, [r2, #80]	; 0x50
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	d039      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d81c      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c79 	.word	0x08003c79
 8003c40:	08003c4d 	.word	0x08003c4d
 8003c44:	08003c5b 	.word	0x08003c5b
 8003c48:	08003c79 	.word	0x08003c79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4c:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a66      	ldr	r2, [pc, #408]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c58:	e00f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f902 	bl	8004e6c <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c82:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	f023 0103 	bic.w	r1, r3, #3
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	4a56      	ldr	r2, [pc, #344]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c96:	e003      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f000 809f 	beq.w	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cce:	f7fd fb0d 	bl	80012ec <HAL_GetTick>
 8003cd2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd fb08 	bl	80012ec <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d903      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ed      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d179      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d04:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d10:	4053      	eors	r3, r2
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1a:	4b34      	ldr	r3, [pc, #208]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a30      	ldr	r2, [pc, #192]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d52:	d118      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd faca 	bl	80012ec <HAL_GetTick>
 8003d58:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5c:	e00d      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd fac5 	bl	80012ec <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d903      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d78:	e005      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0eb      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d129      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9e:	d10e      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003db0:	091a      	lsrs	r2, r3, #4
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6113      	str	r3, [r2, #16]
 8003dbc:	e005      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dc8:	6113      	str	r3, [r2, #16]
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dcc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	e00e      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003dea:	e009      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dec:	58024400 	.word	0x58024400
 8003df0:	58024800 	.word	0x58024800
 8003df4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f002 0301 	and.w	r3, r2, #1
 8003e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f000 8089 	beq.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e28:	2b28      	cmp	r3, #40	; 0x28
 8003e2a:	d86b      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003f0d 	.word	0x08003f0d
 8003e38:	08003f05 	.word	0x08003f05
 8003e3c:	08003f05 	.word	0x08003f05
 8003e40:	08003f05 	.word	0x08003f05
 8003e44:	08003f05 	.word	0x08003f05
 8003e48:	08003f05 	.word	0x08003f05
 8003e4c:	08003f05 	.word	0x08003f05
 8003e50:	08003f05 	.word	0x08003f05
 8003e54:	08003ed9 	.word	0x08003ed9
 8003e58:	08003f05 	.word	0x08003f05
 8003e5c:	08003f05 	.word	0x08003f05
 8003e60:	08003f05 	.word	0x08003f05
 8003e64:	08003f05 	.word	0x08003f05
 8003e68:	08003f05 	.word	0x08003f05
 8003e6c:	08003f05 	.word	0x08003f05
 8003e70:	08003f05 	.word	0x08003f05
 8003e74:	08003eef 	.word	0x08003eef
 8003e78:	08003f05 	.word	0x08003f05
 8003e7c:	08003f05 	.word	0x08003f05
 8003e80:	08003f05 	.word	0x08003f05
 8003e84:	08003f05 	.word	0x08003f05
 8003e88:	08003f05 	.word	0x08003f05
 8003e8c:	08003f05 	.word	0x08003f05
 8003e90:	08003f05 	.word	0x08003f05
 8003e94:	08003f0d 	.word	0x08003f0d
 8003e98:	08003f05 	.word	0x08003f05
 8003e9c:	08003f05 	.word	0x08003f05
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08003f05 	.word	0x08003f05
 8003ea8:	08003f05 	.word	0x08003f05
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003f05 	.word	0x08003f05
 8003ec0:	08003f05 	.word	0x08003f05
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f0d 	.word	0x08003f0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	3308      	adds	r3, #8
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ffc3 	bl	8004e6c <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3328      	adds	r3, #40	; 0x28
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f86a 	bl	8004fd0 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f16:	4bbf      	ldr	r3, [pc, #764]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	4abb      	ldr	r2, [pc, #748]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6553      	str	r3, [r2, #84]	; 0x54
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 0302 	and.w	r3, r2, #2
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d041      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d824      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003f7d 	.word	0x08003f7d
 8003f6c:	08003f93 	.word	0x08003f93
 8003f70:	08003fb1 	.word	0x08003fb1
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fb1 	.word	0x08003fb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f80:	3308      	adds	r3, #8
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 ff71 	bl	8004e6c <RCCEx_PLL2_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f90:	e00f      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f818 	bl	8004fd0 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fba:	4b96      	ldr	r3, [pc, #600]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 0107 	bic.w	r1, r3, #7
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc8:	4a92      	ldr	r2, [pc, #584]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6553      	str	r3, [r2, #84]	; 0x54
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 0304 	and.w	r3, r2, #4
 8003fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d044      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004000:	2b05      	cmp	r3, #5
 8004002:	d825      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004059 	.word	0x08004059
 8004010:	08004025 	.word	0x08004025
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004059 	.word	0x08004059
 800401c:	08004059 	.word	0x08004059
 8004020:	08004059 	.word	0x08004059
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004028:	3308      	adds	r3, #8
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ff1d 	bl	8004e6c <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004038:	e00f      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403e:	3328      	adds	r3, #40	; 0x28
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ffc4 	bl	8004fd0 <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800404e:	e004      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004062:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f023 0107 	bic.w	r1, r3, #7
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004072:	4a68      	ldr	r2, [pc, #416]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f002 0320 	and.w	r3, r2, #32
 800408e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d055      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ae:	d033      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b4:	d82c      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d02f      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c0:	d826      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c6:	d02b      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040cc:	d820      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d2:	d012      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d8:	d81a      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d022      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e2:	d115      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	3308      	adds	r3, #8
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 febd 	bl	8004e6c <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040f8:	e015      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fe:	3328      	adds	r3, #40	; 0x28
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 ff64 	bl	8004fd0 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800410e:	e00a      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004118:	bf00      	nop
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a35      	ldr	r2, [pc, #212]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004140:	430b      	orrs	r3, r1
 8004142:	6553      	str	r3, [r2, #84]	; 0x54
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800415a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800415e:	2300      	movs	r3, #0
 8004160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004164:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d058      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004176:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800417a:	d033      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800417c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004180:	d82c      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d02f      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d826      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004192:	d02b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004198:	d820      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419e:	d012      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d81a      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d022      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d115      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	3308      	adds	r3, #8
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fe57 	bl	8004e6c <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041c4:	e015      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fefe 	bl	8004fd0 <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041da:	e00a      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e2:	e006      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e4:	bf00      	nop
 80041e6:	e004      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e8:	bf00      	nop
 80041ea:	e002      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041ec:	bf00      	nop
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10e      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420a:	4a02      	ldr	r2, [pc, #8]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420c:	430b      	orrs	r3, r1
 800420e:	6593      	str	r3, [r2, #88]	; 0x58
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800422c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004236:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d055      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004248:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800424c:	d033      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800424e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004252:	d82c      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	d02f      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800425a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425e:	d826      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004260:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004264:	d02b      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004266:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800426a:	d820      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800426c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004270:	d012      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004276:	d81a      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d022      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d115      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	3308      	adds	r3, #8
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fdee 	bl	8004e6c <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004296:	e015      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429c:	3328      	adds	r3, #40	; 0x28
 800429e:	2102      	movs	r1, #2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fe95 	bl	8004fd0 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ac:	e00a      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e004      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042cc:	4ba1      	ldr	r3, [pc, #644]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042dc:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042de:	430b      	orrs	r3, r1
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
 80042e2:	e003      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f002 0308 	and.w	r3, r2, #8
 80042f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004302:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004306:	460b      	mov	r3, r1
 8004308:	4313      	orrs	r3, r2
 800430a:	d01e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	3328      	adds	r3, #40	; 0x28
 8004320:	2102      	movs	r1, #2
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe54 	bl	8004fd0 <RCCEx_PLL3_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004334:	4b87      	ldr	r3, [pc, #540]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004344:	4a83      	ldr	r2, [pc, #524]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f002 0310 	and.w	r3, r2, #16
 8004356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004360:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d01e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004376:	d10c      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	3328      	adds	r3, #40	; 0x28
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fe25 	bl	8004fd0 <RCCEx_PLL3_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a2:	4a6c      	ldr	r2, [pc, #432]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d03e      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d4:	d022      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043da:	d81b      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d00b      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043e6:	e015      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	3308      	adds	r3, #8
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd3b 	bl	8004e6c <RCCEx_PLL2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004402:	3328      	adds	r3, #40	; 0x28
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fde2 	bl	8004fd0 <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800441c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004426:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004436:	4a47      	ldr	r2, [pc, #284]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004438:	430b      	orrs	r3, r1
 800443a:	6593      	str	r3, [r2, #88]	; 0x58
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004452:	67bb      	str	r3, [r7, #120]	; 0x78
 8004454:	2300      	movs	r3, #0
 8004456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004458:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d03b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800446e:	d01f      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004474:	d818      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800447c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004480:	d007      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004482:	e011      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004490:	e00f      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004496:	3328      	adds	r3, #40	; 0x28
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fd98 	bl	8004fd0 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6553      	str	r3, [r2, #84]	; 0x54
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80044e6:	673b      	str	r3, [r7, #112]	; 0x70
 80044e8:	2300      	movs	r3, #0
 80044ea:	677b      	str	r3, [r7, #116]	; 0x74
 80044ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044f0:	460b      	mov	r3, r1
 80044f2:	4313      	orrs	r3, r2
 80044f4:	d034      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d007      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004506:	e011      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004514:	e00e      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	3308      	adds	r3, #8
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fca4 	bl	8004e6c <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	4a02      	ldr	r2, [pc, #8]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454c:	430b      	orrs	r3, r1
 800454e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800456c:	66bb      	str	r3, [r7, #104]	; 0x68
 800456e:	2300      	movs	r3, #0
 8004570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004572:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004576:	460b      	mov	r3, r1
 8004578:	4313      	orrs	r3, r2
 800457a:	d00c      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	3328      	adds	r3, #40	; 0x28
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fd23 	bl	8004fd0 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045a2:	663b      	str	r3, [r7, #96]	; 0x60
 80045a4:	2300      	movs	r3, #0
 80045a6:	667b      	str	r3, [r7, #100]	; 0x64
 80045a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d038      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d018      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c4:	d811      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ca:	d014      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d80b      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d011      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d106      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045dc:	4bc3      	ldr	r3, [pc, #780]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4ac2      	ldr	r2, [pc, #776]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045f0:	e004      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045f2:	bf00      	nop
 80045f4:	e002      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045f6:	bf00      	nop
 80045f8:	e000      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004604:	4bb9      	ldr	r3, [pc, #740]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004614:	4ab5      	ldr	r2, [pc, #724]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6553      	str	r3, [r2, #84]	; 0x54
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004620:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004630:	65bb      	str	r3, [r7, #88]	; 0x58
 8004632:	2300      	movs	r3, #0
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004636:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004640:	4baa      	ldr	r3, [pc, #680]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4aa7      	ldr	r2, [pc, #668]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
 8004662:	2300      	movs	r3, #0
 8004664:	657b      	str	r3, [r7, #84]	; 0x54
 8004666:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004670:	4b9e      	ldr	r3, [pc, #632]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004680:	4a9a      	ldr	r2, [pc, #616]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48
 8004694:	2300      	movs	r3, #0
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004698:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800469c:	460b      	mov	r3, r1
 800469e:	4313      	orrs	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a2:	4b92      	ldr	r3, [pc, #584]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	4a8e      	ldr	r2, [pc, #568]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
 80046c4:	2300      	movs	r3, #0
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
 80046c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046d2:	4b86      	ldr	r3, [pc, #536]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4a85      	ldr	r2, [pc, #532]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046dc:	6113      	str	r3, [r2, #16]
 80046de:	4b83      	ldr	r3, [pc, #524]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e0:	6919      	ldr	r1, [r3, #16]
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046fe:	2300      	movs	r3, #0
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004702:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800470c:	4b77      	ldr	r3, [pc, #476]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	4a74      	ldr	r2, [pc, #464]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471c:	430b      	orrs	r3, r1
 800471e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 800472e:	2300      	movs	r3, #0
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
 8004732:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800473c:	4b6b      	ldr	r3, [pc, #428]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474c:	4a67      	ldr	r2, [pc, #412]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474e:	430b      	orrs	r3, r1
 8004750:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	2100      	movs	r1, #0
 800475c:	62b9      	str	r1, [r7, #40]	; 0x28
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004764:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004768:	460b      	mov	r3, r1
 800476a:	4313      	orrs	r3, r2
 800476c:	d011      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	3308      	adds	r3, #8
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fb78 	bl	8004e6c <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	2100      	movs	r1, #0
 800479c:	6239      	str	r1, [r7, #32]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047a8:	460b      	mov	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	d011      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	3308      	adds	r3, #8
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fb58 	bl	8004e6c <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	2100      	movs	r1, #0
 80047dc:	61b9      	str	r1, [r7, #24]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d011      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	3308      	adds	r3, #8
 80047f4:	2102      	movs	r1, #2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fb38 	bl	8004e6c <RCCEx_PLL2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800480e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	2100      	movs	r1, #0
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004828:	460b      	mov	r3, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	d011      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004832:	3328      	adds	r3, #40	; 0x28
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fbca 	bl	8004fd0 <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800484e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	2100      	movs	r1, #0
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d011      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	3328      	adds	r3, #40	; 0x28
 8004874:	2101      	movs	r1, #1
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fbaa 	bl	8004fd0 <RCCEx_PLL3_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	2100      	movs	r1, #0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d011      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	3328      	adds	r3, #40	; 0x28
 80048b4:	2102      	movs	r1, #2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fb8a 	bl	8004fd0 <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80048d2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80048e6:	46bd      	mov	sp, r7
 80048e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ec:	58024400 	.word	0x58024400

080048f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048f4:	f7fe fd96 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	58024400 	.word	0x58024400
 8004918:	08006a90 	.word	0x08006a90

0800491c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004924:	4ba1      	ldr	r3, [pc, #644]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800492e:	4b9f      	ldr	r3, [pc, #636]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	0b1b      	lsrs	r3, r3, #12
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800493a:	4b9c      	ldr	r3, [pc, #624]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004946:	4b99      	ldr	r3, [pc, #612]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	08db      	lsrs	r3, r3, #3
 800494c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8111 	beq.w	8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b02      	cmp	r3, #2
 800496e:	f000 8083 	beq.w	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	f200 80a1 	bhi.w	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d056      	beq.n	8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004986:	e099      	b.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004988:	4b88      	ldr	r3, [pc, #544]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02d      	beq.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004994:	4b85      	ldr	r3, [pc, #532]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	4a84      	ldr	r2, [pc, #528]	; (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b7b      	ldr	r3, [pc, #492]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049ee:	e087      	b.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b6a      	ldr	r3, [pc, #424]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a32:	e065      	b.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a76:	e043      	b.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b48      	ldr	r3, [pc, #288]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e021      	b.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b37      	ldr	r3, [pc, #220]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b00:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	0a5b      	lsrs	r3, r3, #9
 8004b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b26:	ee17 2a90 	vmov	r2, s15
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	ee17 2a90 	vmov	r2, s15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	0e1b      	lsrs	r3, r3, #24
 8004b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b82:	ee17 2a90 	vmov	r2, s15
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b8a:	e008      	b.n	8004b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
}
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	; 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	03d09000 	.word	0x03d09000
 8004bb4:	46000000 	.word	0x46000000
 8004bb8:	4c742400 	.word	0x4c742400
 8004bbc:	4a742400 	.word	0x4a742400
 8004bc0:	4af42400 	.word	0x4af42400

08004bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bcc:	4ba1      	ldr	r3, [pc, #644]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bd6:	4b9f      	ldr	r3, [pc, #636]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	0d1b      	lsrs	r3, r3, #20
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004be2:	4b9c      	ldr	r3, [pc, #624]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bee:	4b99      	ldr	r3, [pc, #612]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8111 	beq.w	8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	f000 8083 	beq.w	8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	f200 80a1 	bhi.w	8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d056      	beq.n	8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c2e:	e099      	b.n	8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c30:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02d      	beq.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c3c:	4b85      	ldr	r3, [pc, #532]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	4a84      	ldr	r2, [pc, #528]	; (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b7b      	ldr	r3, [pc, #492]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c96:	e087      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cda:	e065      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1e:	e043      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b48      	ldr	r3, [pc, #288]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e021      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004da8:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	0a5b      	lsrs	r3, r3, #9
 8004dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dce:	ee17 2a90 	vmov	r2, s15
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	0c1b      	lsrs	r3, r3, #16
 8004ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfc:	ee17 2a90 	vmov	r2, s15
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	0e1b      	lsrs	r3, r3, #24
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2a:	ee17 2a90 	vmov	r2, s15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
}
 8004e46:	bf00      	nop
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
 8004e58:	03d09000 	.word	0x03d09000
 8004e5c:	46000000 	.word	0x46000000
 8004e60:	4c742400 	.word	0x4c742400
 8004e64:	4a742400 	.word	0x4a742400
 8004e68:	4af42400 	.word	0x4af42400

08004e6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e7a:	4b53      	ldr	r3, [pc, #332]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d101      	bne.n	8004e8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e099      	b.n	8004fbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e8a:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a4e      	ldr	r2, [pc, #312]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004e90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc fa29 	bl	80012ec <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e9e:	f7fc fa25 	bl	80012ec <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e086      	b.n	8004fbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ebc:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	493f      	ldr	r1, [pc, #252]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	628b      	str	r3, [r1, #40]	; 0x28
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	025b      	lsls	r3, r3, #9
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f00:	4931      	ldr	r1, [pc, #196]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f06:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	492d      	ldr	r1, [pc, #180]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f023 0220 	bic.w	r2, r3, #32
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	4928      	ldr	r1, [pc, #160]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f2a:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f30:	f023 0310 	bic.w	r3, r3, #16
 8004f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <RCCEx_PLL2_Config+0x160>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	69d2      	ldr	r2, [r2, #28]
 8004f42:	00d2      	lsls	r2, r2, #3
 8004f44:	4920      	ldr	r1, [pc, #128]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f50:	f043 0310 	orr.w	r3, r3, #16
 8004f54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f68:	e00f      	b.n	8004f8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f70:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f7c:	e005      	b.n	8004f8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f96:	f7fc f9a9 	bl	80012ec <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f9c:	e008      	b.n	8004fb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f9e:	f7fc f9a5 	bl	80012ec <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e006      	b.n	8004fbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	ffff0007 	.word	0xffff0007

08004fd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fde:	4b53      	ldr	r3, [pc, #332]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d101      	bne.n	8004fee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e099      	b.n	8005122 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fee:	4b4f      	ldr	r3, [pc, #316]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4e      	ldr	r2, [pc, #312]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fc f977 	bl	80012ec <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005000:	e008      	b.n	8005014 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005002:	f7fc f973 	bl	80012ec <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e086      	b.n	8005122 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005014:	4b45      	ldr	r3, [pc, #276]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005020:	4b42      	ldr	r3, [pc, #264]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	051b      	lsls	r3, r3, #20
 800502e:	493f      	ldr	r1, [pc, #252]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005030:	4313      	orrs	r3, r2
 8005032:	628b      	str	r3, [r1, #40]	; 0x28
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	3b01      	subs	r3, #1
 800503a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	3b01      	subs	r3, #1
 8005044:	025b      	lsls	r3, r3, #9
 8005046:	b29b      	uxth	r3, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	3b01      	subs	r3, #1
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	3b01      	subs	r3, #1
 800505e:	061b      	lsls	r3, r3, #24
 8005060:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005064:	4931      	ldr	r1, [pc, #196]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005066:	4313      	orrs	r3, r2
 8005068:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800506a:	4b30      	ldr	r3, [pc, #192]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	492d      	ldr	r1, [pc, #180]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	4928      	ldr	r1, [pc, #160]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800508e:	4b27      	ldr	r3, [pc, #156]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	4a26      	ldr	r2, [pc, #152]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 800509c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <RCCEx_PLL3_Config+0x160>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	69d2      	ldr	r2, [r2, #28]
 80050a6:	00d2      	lsls	r2, r2, #3
 80050a8:	4920      	ldr	r1, [pc, #128]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050ae:	4b1f      	ldr	r3, [pc, #124]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050cc:	e00f      	b.n	80050ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050d4:	4b15      	ldr	r3, [pc, #84]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	4a14      	ldr	r2, [pc, #80]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050e0:	e005      	b.n	80050ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a11      	ldr	r2, [pc, #68]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a0e      	ldr	r2, [pc, #56]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fa:	f7fc f8f7 	bl	80012ec <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005100:	e008      	b.n	8005114 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005102:	f7fc f8f3 	bl	80012ec <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e006      	b.n	8005122 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <RCCEx_PLL3_Config+0x15c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	ffff0007 	.word	0xffff0007

08005134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e042      	b.n	80051cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fb fdcf 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	; 0x24
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fe1e 	bl	8005dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8b3 	bl	80052f0 <UART_SetConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e01b      	b.n	80051cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fe9d 	bl	8005f04 <UART_CheckIdleState>
 80051ca:	4603      	mov	r3, r0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d17b      	bne.n	80052e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_UART_Transmit+0x26>
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e074      	b.n	80052e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2221      	movs	r2, #33	; 0x21
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520e:	f7fc f86d 	bl	80012ec <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d108      	bne.n	8005240 <HAL_UART_Transmit+0x6c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e003      	b.n	8005248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005248:	e030      	b.n	80052ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 feff 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e03d      	b.n	80052e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3302      	adds	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e007      	b.n	800529a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1c8      	bne.n	800524a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	2140      	movs	r1, #64	; 0x40
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fec8 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f4:	b092      	sub	sp, #72	; 0x48
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	431a      	orrs	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4313      	orrs	r3, r2
 8005316:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4bbe      	ldr	r3, [pc, #760]	; (8005618 <UART_SetConfig+0x328>)
 8005320:	4013      	ands	r3, r2
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005328:	430b      	orrs	r3, r1
 800532a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4ab3      	ldr	r2, [pc, #716]	; (800561c <UART_SetConfig+0x32c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005358:	4313      	orrs	r3, r2
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	4baf      	ldr	r3, [pc, #700]	; (8005620 <UART_SetConfig+0x330>)
 8005364:	4013      	ands	r3, r2
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800536c:	430b      	orrs	r3, r1
 800536e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f023 010f 	bic.w	r1, r3, #15
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4aa6      	ldr	r2, [pc, #664]	; (8005624 <UART_SetConfig+0x334>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d177      	bne.n	8005480 <UART_SetConfig+0x190>
 8005390:	4ba5      	ldr	r3, [pc, #660]	; (8005628 <UART_SetConfig+0x338>)
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005398:	2b28      	cmp	r3, #40	; 0x28
 800539a:	d86d      	bhi.n	8005478 <UART_SetConfig+0x188>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0xb4>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	08005449 	.word	0x08005449
 80053a8:	08005479 	.word	0x08005479
 80053ac:	08005479 	.word	0x08005479
 80053b0:	08005479 	.word	0x08005479
 80053b4:	08005479 	.word	0x08005479
 80053b8:	08005479 	.word	0x08005479
 80053bc:	08005479 	.word	0x08005479
 80053c0:	08005479 	.word	0x08005479
 80053c4:	08005451 	.word	0x08005451
 80053c8:	08005479 	.word	0x08005479
 80053cc:	08005479 	.word	0x08005479
 80053d0:	08005479 	.word	0x08005479
 80053d4:	08005479 	.word	0x08005479
 80053d8:	08005479 	.word	0x08005479
 80053dc:	08005479 	.word	0x08005479
 80053e0:	08005479 	.word	0x08005479
 80053e4:	08005459 	.word	0x08005459
 80053e8:	08005479 	.word	0x08005479
 80053ec:	08005479 	.word	0x08005479
 80053f0:	08005479 	.word	0x08005479
 80053f4:	08005479 	.word	0x08005479
 80053f8:	08005479 	.word	0x08005479
 80053fc:	08005479 	.word	0x08005479
 8005400:	08005479 	.word	0x08005479
 8005404:	08005461 	.word	0x08005461
 8005408:	08005479 	.word	0x08005479
 800540c:	08005479 	.word	0x08005479
 8005410:	08005479 	.word	0x08005479
 8005414:	08005479 	.word	0x08005479
 8005418:	08005479 	.word	0x08005479
 800541c:	08005479 	.word	0x08005479
 8005420:	08005479 	.word	0x08005479
 8005424:	08005469 	.word	0x08005469
 8005428:	08005479 	.word	0x08005479
 800542c:	08005479 	.word	0x08005479
 8005430:	08005479 	.word	0x08005479
 8005434:	08005479 	.word	0x08005479
 8005438:	08005479 	.word	0x08005479
 800543c:	08005479 	.word	0x08005479
 8005440:	08005479 	.word	0x08005479
 8005444:	08005471 	.word	0x08005471
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e222      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e21e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e21a      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e216      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005468:	2320      	movs	r3, #32
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e212      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e20e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e20a      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a69      	ldr	r2, [pc, #420]	; (800562c <UART_SetConfig+0x33c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d130      	bne.n	80054ec <UART_SetConfig+0x1fc>
 800548a:	4b67      	ldr	r3, [pc, #412]	; (8005628 <UART_SetConfig+0x338>)
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	2b05      	cmp	r3, #5
 8005494:	d826      	bhi.n	80054e4 <UART_SetConfig+0x1f4>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0x1ac>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	080054c5 	.word	0x080054c5
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e1ec      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e1e8      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e1e4      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e1e0      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054d4:	2320      	movs	r3, #32
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e1dc      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e2:	e1d8      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e1d4      	b.n	8005896 <UART_SetConfig+0x5a6>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a4f      	ldr	r2, [pc, #316]	; (8005630 <UART_SetConfig+0x340>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d130      	bne.n	8005558 <UART_SetConfig+0x268>
 80054f6:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <UART_SetConfig+0x338>)
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d826      	bhi.n	8005550 <UART_SetConfig+0x260>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x218>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005521 	.word	0x08005521
 800550c:	08005529 	.word	0x08005529
 8005510:	08005531 	.word	0x08005531
 8005514:	08005539 	.word	0x08005539
 8005518:	08005541 	.word	0x08005541
 800551c:	08005549 	.word	0x08005549
 8005520:	2300      	movs	r3, #0
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e1b6      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005528:	2304      	movs	r3, #4
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e1b2      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005530:	2308      	movs	r3, #8
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005536:	e1ae      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553e:	e1aa      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005540:	2320      	movs	r3, #32
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e1a6      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e1a2      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e19e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a35      	ldr	r2, [pc, #212]	; (8005634 <UART_SetConfig+0x344>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d130      	bne.n	80055c4 <UART_SetConfig+0x2d4>
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <UART_SetConfig+0x338>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b05      	cmp	r3, #5
 800556c:	d826      	bhi.n	80055bc <UART_SetConfig+0x2cc>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <UART_SetConfig+0x284>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	0800558d 	.word	0x0800558d
 8005578:	08005595 	.word	0x08005595
 800557c:	0800559d 	.word	0x0800559d
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e180      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e17c      	b.n	8005896 <UART_SetConfig+0x5a6>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e178      	b.n	8005896 <UART_SetConfig+0x5a6>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e174      	b.n	8005896 <UART_SetConfig+0x5a6>
 80055ac:	2320      	movs	r3, #32
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e170      	b.n	8005896 <UART_SetConfig+0x5a6>
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e16c      	b.n	8005896 <UART_SetConfig+0x5a6>
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e168      	b.n	8005896 <UART_SetConfig+0x5a6>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <UART_SetConfig+0x348>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d142      	bne.n	8005654 <UART_SetConfig+0x364>
 80055ce:	4b16      	ldr	r3, [pc, #88]	; (8005628 <UART_SetConfig+0x338>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d838      	bhi.n	800564c <UART_SetConfig+0x35c>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0x2f0>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f9 	.word	0x080055f9
 80055e4:	08005601 	.word	0x08005601
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005611 	.word	0x08005611
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	08005645 	.word	0x08005645
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e14a      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e146      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e142      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e13e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005618:	cfff69f3 	.word	0xcfff69f3
 800561c:	58000c00 	.word	0x58000c00
 8005620:	11fff4ff 	.word	0x11fff4ff
 8005624:	40011000 	.word	0x40011000
 8005628:	58024400 	.word	0x58024400
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	2320      	movs	r3, #32
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e128      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005644:	2340      	movs	r3, #64	; 0x40
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e124      	b.n	8005896 <UART_SetConfig+0x5a6>
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e120      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4acb      	ldr	r2, [pc, #812]	; (8005988 <UART_SetConfig+0x698>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d176      	bne.n	800574c <UART_SetConfig+0x45c>
 800565e:	4bcb      	ldr	r3, [pc, #812]	; (800598c <UART_SetConfig+0x69c>)
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005666:	2b28      	cmp	r3, #40	; 0x28
 8005668:	d86c      	bhi.n	8005744 <UART_SetConfig+0x454>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x380>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005715 	.word	0x08005715
 8005674:	08005745 	.word	0x08005745
 8005678:	08005745 	.word	0x08005745
 800567c:	08005745 	.word	0x08005745
 8005680:	08005745 	.word	0x08005745
 8005684:	08005745 	.word	0x08005745
 8005688:	08005745 	.word	0x08005745
 800568c:	08005745 	.word	0x08005745
 8005690:	0800571d 	.word	0x0800571d
 8005694:	08005745 	.word	0x08005745
 8005698:	08005745 	.word	0x08005745
 800569c:	08005745 	.word	0x08005745
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005745 	.word	0x08005745
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	08005745 	.word	0x08005745
 80056d0:	0800572d 	.word	0x0800572d
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005745 	.word	0x08005745
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	08005745 	.word	0x08005745
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
 8005710:	0800573d 	.word	0x0800573d
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e0bc      	b.n	8005896 <UART_SetConfig+0x5a6>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e0b8      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e0b4      	b.n	8005896 <UART_SetConfig+0x5a6>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e0b0      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e0ac      	b.n	8005896 <UART_SetConfig+0x5a6>
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e0a8      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e0a4      	b.n	8005896 <UART_SetConfig+0x5a6>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a8f      	ldr	r2, [pc, #572]	; (8005990 <UART_SetConfig+0x6a0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d130      	bne.n	80057b8 <UART_SetConfig+0x4c8>
 8005756:	4b8d      	ldr	r3, [pc, #564]	; (800598c <UART_SetConfig+0x69c>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b05      	cmp	r3, #5
 8005760:	d826      	bhi.n	80057b0 <UART_SetConfig+0x4c0>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x478>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005781 	.word	0x08005781
 800576c:	08005789 	.word	0x08005789
 8005770:	08005791 	.word	0x08005791
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e086      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e082      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e07e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e07a      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e076      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e072      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e06e      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a75      	ldr	r2, [pc, #468]	; (8005994 <UART_SetConfig+0x6a4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d130      	bne.n	8005824 <UART_SetConfig+0x534>
 80057c2:	4b72      	ldr	r3, [pc, #456]	; (800598c <UART_SetConfig+0x69c>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d826      	bhi.n	800581c <UART_SetConfig+0x52c>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <UART_SetConfig+0x4e4>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e050      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e04c      	b.n	8005896 <UART_SetConfig+0x5a6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e048      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e044      	b.n	8005896 <UART_SetConfig+0x5a6>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e040      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e03c      	b.n	8005896 <UART_SetConfig+0x5a6>
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e038      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5b      	ldr	r2, [pc, #364]	; (8005998 <UART_SetConfig+0x6a8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x5a0>
 800582e:	4b57      	ldr	r3, [pc, #348]	; (800598c <UART_SetConfig+0x69c>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x598>
 800583a:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0x550>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e01a      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e016      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e012      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e00e      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e00a      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005886:	e006      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588e:	e002      	b.n	8005896 <UART_SetConfig+0x5a6>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <UART_SetConfig+0x6a8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	f040 80f8 	bne.w	8005a92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	dc46      	bgt.n	8005938 <UART_SetConfig+0x648>
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	f2c0 8082 	blt.w	80059b4 <UART_SetConfig+0x6c4>
 80058b0:	3b02      	subs	r3, #2
 80058b2:	2b1e      	cmp	r3, #30
 80058b4:	d87e      	bhi.n	80059b4 <UART_SetConfig+0x6c4>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x5cc>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	0800593f 	.word	0x0800593f
 80058c0:	080059b5 	.word	0x080059b5
 80058c4:	08005947 	.word	0x08005947
 80058c8:	080059b5 	.word	0x080059b5
 80058cc:	080059b5 	.word	0x080059b5
 80058d0:	080059b5 	.word	0x080059b5
 80058d4:	08005957 	.word	0x08005957
 80058d8:	080059b5 	.word	0x080059b5
 80058dc:	080059b5 	.word	0x080059b5
 80058e0:	080059b5 	.word	0x080059b5
 80058e4:	080059b5 	.word	0x080059b5
 80058e8:	080059b5 	.word	0x080059b5
 80058ec:	080059b5 	.word	0x080059b5
 80058f0:	080059b5 	.word	0x080059b5
 80058f4:	08005967 	.word	0x08005967
 80058f8:	080059b5 	.word	0x080059b5
 80058fc:	080059b5 	.word	0x080059b5
 8005900:	080059b5 	.word	0x080059b5
 8005904:	080059b5 	.word	0x080059b5
 8005908:	080059b5 	.word	0x080059b5
 800590c:	080059b5 	.word	0x080059b5
 8005910:	080059b5 	.word	0x080059b5
 8005914:	080059b5 	.word	0x080059b5
 8005918:	080059b5 	.word	0x080059b5
 800591c:	080059b5 	.word	0x080059b5
 8005920:	080059b5 	.word	0x080059b5
 8005924:	080059b5 	.word	0x080059b5
 8005928:	080059b5 	.word	0x080059b5
 800592c:	080059b5 	.word	0x080059b5
 8005930:	080059b5 	.word	0x080059b5
 8005934:	080059a7 	.word	0x080059a7
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d037      	beq.n	80059ac <UART_SetConfig+0x6bc>
 800593c:	e03a      	b.n	80059b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800593e:	f7fe ffd7 	bl	80048f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005944:	e03c      	b.n	80059c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe ffe6 	bl	800491c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005954:	e034      	b.n	80059c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005956:	f107 0318 	add.w	r3, r7, #24
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f932 	bl	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005964:	e02c      	b.n	80059c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <UART_SetConfig+0x69c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <UART_SetConfig+0x69c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	4a07      	ldr	r2, [pc, #28]	; (800599c <UART_SetConfig+0x6ac>)
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005984:	e01c      	b.n	80059c0 <UART_SetConfig+0x6d0>
 8005986:	bf00      	nop
 8005988:	40011400 	.word	0x40011400
 800598c:	58024400 	.word	0x58024400
 8005990:	40007800 	.word	0x40007800
 8005994:	40007c00 	.word	0x40007c00
 8005998:	58000c00 	.word	0x58000c00
 800599c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b9d      	ldr	r3, [pc, #628]	; (8005c18 <UART_SetConfig+0x928>)
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059a4:	e00c      	b.n	80059c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a6:	4b9d      	ldr	r3, [pc, #628]	; (8005c1c <UART_SetConfig+0x92c>)
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059aa:	e009      	b.n	80059c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b2:	e005      	b.n	80059c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80059be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 81de 	beq.w	8005d84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	4a94      	ldr	r2, [pc, #592]	; (8005c20 <UART_SetConfig+0x930>)
 80059ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80059da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d305      	bcc.n	80059f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d903      	bls.n	8005a00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059fe:	e1c1      	b.n	8005d84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	2200      	movs	r2, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	60fa      	str	r2, [r7, #12]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	4a84      	ldr	r2, [pc, #528]	; (8005c20 <UART_SetConfig+0x930>)
 8005a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2200      	movs	r2, #0
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a22:	f7fa fc61 	bl	80002e8 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	020b      	lsls	r3, r1, #8
 8005a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a3c:	0202      	lsls	r2, r0, #8
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	6849      	ldr	r1, [r1, #4]
 8005a42:	0849      	lsrs	r1, r1, #1
 8005a44:	2000      	movs	r0, #0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4605      	mov	r5, r0
 8005a4a:	eb12 0804 	adds.w	r8, r2, r4
 8005a4e:	eb43 0905 	adc.w	r9, r3, r5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	469a      	mov	sl, r3
 8005a5a:	4693      	mov	fp, r2
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	465b      	mov	r3, fp
 8005a60:	4640      	mov	r0, r8
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fa fc40 	bl	80002e8 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a76:	d308      	bcc.n	8005a8a <UART_SetConfig+0x79a>
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d204      	bcs.n	8005a8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e17c      	b.n	8005d84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a90:	e178      	b.n	8005d84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9a:	f040 80c5 	bne.w	8005c28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	dc48      	bgt.n	8005b38 <UART_SetConfig+0x848>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	db7b      	blt.n	8005ba2 <UART_SetConfig+0x8b2>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d879      	bhi.n	8005ba2 <UART_SetConfig+0x8b2>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x7c4>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005b3f 	.word	0x08005b3f
 8005ab8:	08005b47 	.word	0x08005b47
 8005abc:	08005ba3 	.word	0x08005ba3
 8005ac0:	08005ba3 	.word	0x08005ba3
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005ba3 	.word	0x08005ba3
 8005acc:	08005ba3 	.word	0x08005ba3
 8005ad0:	08005ba3 	.word	0x08005ba3
 8005ad4:	08005b5f 	.word	0x08005b5f
 8005ad8:	08005ba3 	.word	0x08005ba3
 8005adc:	08005ba3 	.word	0x08005ba3
 8005ae0:	08005ba3 	.word	0x08005ba3
 8005ae4:	08005ba3 	.word	0x08005ba3
 8005ae8:	08005ba3 	.word	0x08005ba3
 8005aec:	08005ba3 	.word	0x08005ba3
 8005af0:	08005ba3 	.word	0x08005ba3
 8005af4:	08005b6f 	.word	0x08005b6f
 8005af8:	08005ba3 	.word	0x08005ba3
 8005afc:	08005ba3 	.word	0x08005ba3
 8005b00:	08005ba3 	.word	0x08005ba3
 8005b04:	08005ba3 	.word	0x08005ba3
 8005b08:	08005ba3 	.word	0x08005ba3
 8005b0c:	08005ba3 	.word	0x08005ba3
 8005b10:	08005ba3 	.word	0x08005ba3
 8005b14:	08005ba3 	.word	0x08005ba3
 8005b18:	08005ba3 	.word	0x08005ba3
 8005b1c:	08005ba3 	.word	0x08005ba3
 8005b20:	08005ba3 	.word	0x08005ba3
 8005b24:	08005ba3 	.word	0x08005ba3
 8005b28:	08005ba3 	.word	0x08005ba3
 8005b2c:	08005ba3 	.word	0x08005ba3
 8005b30:	08005ba3 	.word	0x08005ba3
 8005b34:	08005b95 	.word	0x08005b95
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d02e      	beq.n	8005b9a <UART_SetConfig+0x8aa>
 8005b3c:	e031      	b.n	8005ba2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3e:	f7fd fca1 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8005b42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b44:	e033      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b46:	f7fd fcb3 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8005b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b4c:	e02f      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fee2 	bl	800491c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b5c:	e027      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5e:	f107 0318 	add.w	r3, r7, #24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f82e 	bl	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b6c:	e01f      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <UART_SetConfig+0x934>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b7a:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <UART_SetConfig+0x934>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	08db      	lsrs	r3, r3, #3
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <UART_SetConfig+0x928>)
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b8c:	e00f      	b.n	8005bae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b8e:	4b22      	ldr	r3, [pc, #136]	; (8005c18 <UART_SetConfig+0x928>)
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b92:	e00c      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <UART_SetConfig+0x92c>)
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80e7 	beq.w	8005d84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <UART_SetConfig+0x930>)
 8005bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc8:	005a      	lsls	r2, r3, #1
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	441a      	add	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d916      	bls.n	8005c10 <UART_SetConfig+0x920>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d212      	bcs.n	8005c10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f023 030f 	bic.w	r3, r3, #15
 8005bf2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c02:	4313      	orrs	r3, r2
 8005c04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e0b9      	b.n	8005d84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c16:	e0b5      	b.n	8005d84 <UART_SetConfig+0xa94>
 8005c18:	03d09000 	.word	0x03d09000
 8005c1c:	003d0900 	.word	0x003d0900
 8005c20:	08006aa0 	.word	0x08006aa0
 8005c24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	dc49      	bgt.n	8005cc4 <UART_SetConfig+0x9d4>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db7c      	blt.n	8005d2e <UART_SetConfig+0xa3e>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d87a      	bhi.n	8005d2e <UART_SetConfig+0xa3e>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <UART_SetConfig+0x950>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005cd3 	.word	0x08005cd3
 8005c48:	08005d2f 	.word	0x08005d2f
 8005c4c:	08005d2f 	.word	0x08005d2f
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005d2f 	.word	0x08005d2f
 8005c58:	08005d2f 	.word	0x08005d2f
 8005c5c:	08005d2f 	.word	0x08005d2f
 8005c60:	08005ceb 	.word	0x08005ceb
 8005c64:	08005d2f 	.word	0x08005d2f
 8005c68:	08005d2f 	.word	0x08005d2f
 8005c6c:	08005d2f 	.word	0x08005d2f
 8005c70:	08005d2f 	.word	0x08005d2f
 8005c74:	08005d2f 	.word	0x08005d2f
 8005c78:	08005d2f 	.word	0x08005d2f
 8005c7c:	08005d2f 	.word	0x08005d2f
 8005c80:	08005cfb 	.word	0x08005cfb
 8005c84:	08005d2f 	.word	0x08005d2f
 8005c88:	08005d2f 	.word	0x08005d2f
 8005c8c:	08005d2f 	.word	0x08005d2f
 8005c90:	08005d2f 	.word	0x08005d2f
 8005c94:	08005d2f 	.word	0x08005d2f
 8005c98:	08005d2f 	.word	0x08005d2f
 8005c9c:	08005d2f 	.word	0x08005d2f
 8005ca0:	08005d2f 	.word	0x08005d2f
 8005ca4:	08005d2f 	.word	0x08005d2f
 8005ca8:	08005d2f 	.word	0x08005d2f
 8005cac:	08005d2f 	.word	0x08005d2f
 8005cb0:	08005d2f 	.word	0x08005d2f
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d2f 	.word	0x08005d2f
 8005cbc:	08005d2f 	.word	0x08005d2f
 8005cc0:	08005d21 	.word	0x08005d21
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d02e      	beq.n	8005d26 <UART_SetConfig+0xa36>
 8005cc8:	e031      	b.n	8005d2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cca:	f7fd fbdb 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8005cce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd0:	e033      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd2:	f7fd fbed 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8005cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd8:	e02f      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fe1c 	bl	800491c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e027      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe ff68 	bl	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf8:	e01f      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfa:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <UART_SetConfig+0xac0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <UART_SetConfig+0xac0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	08db      	lsrs	r3, r3, #3
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <UART_SetConfig+0xac4>)
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d18:	e00f      	b.n	8005d3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d1a:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <UART_SetConfig+0xac4>)
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1e:	e00c      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <UART_SetConfig+0xac8>)
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d24:	e009      	b.n	8005d3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d2c:	e005      	b.n	8005d3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d38:	bf00      	nop
    }

    if (pclk != 0U)
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d021      	beq.n	8005d84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <UART_SetConfig+0xacc>)
 8005d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	441a      	add	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d909      	bls.n	8005d7e <UART_SetConfig+0xa8e>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d205      	bcs.n	8005d7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
 8005d7c:	e002      	b.n	8005d84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2200      	movs	r2, #0
 8005d98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005da0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3748      	adds	r7, #72	; 0x48
 8005da8:	46bd      	mov	sp, r7
 8005daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	03d09000 	.word	0x03d09000
 8005db8:	003d0900 	.word	0x003d0900
 8005dbc:	08006aa0 	.word	0x08006aa0

08005dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebe:	d10a      	bne.n	8005ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b098      	sub	sp, #96	; 0x60
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f14:	f7fb f9ea 	bl	80012ec <HAL_GetTick>
 8005f18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d12f      	bne.n	8005f88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f30:	2200      	movs	r2, #0
 8005f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f88e 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d022      	beq.n	8005f88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f56:	653b      	str	r3, [r7, #80]	; 0x50
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e6      	bne.n	8005f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e063      	b.n	8006050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d149      	bne.n	800602a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f857 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d03c      	beq.n	800602a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e6      	bne.n	8005fb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006002:	61fa      	str	r2, [r7, #28]
 8006004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69b9      	ldr	r1, [r7, #24]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	617b      	str	r3, [r7, #20]
   return(result);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e012      	b.n	8006050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3758      	adds	r7, #88	; 0x58
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006068:	e04f      	b.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d04b      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fb f93b 	bl	80012ec <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <UART_WaitOnFlagUntilTimeout+0x30>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e04e      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d037      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d034      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d031      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d110      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2208      	movs	r2, #8
 80060ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f839 	bl	8006134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2208      	movs	r2, #8
 80060c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e029      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d111      	bne.n	800610a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f81f 	bl	8006134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e00f      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	429a      	cmp	r2, r3
 8006126:	d0a0      	beq.n	800606a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b095      	sub	sp, #84	; 0x54
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615a:	643b      	str	r3, [r7, #64]	; 0x40
 800615c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e6      	bne.n	800613c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	61fb      	str	r3, [r7, #28]
   return(result);
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <UART_EndRxTransfer+0xc8>)
 8006182:	4013      	ands	r3, r2
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d118      	bne.n	80061dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6979      	ldr	r1, [r7, #20]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	613b      	str	r3, [r7, #16]
   return(result);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e6      	bne.n	80061aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061f0:	bf00      	nop
 80061f2:	3754      	adds	r7, #84	; 0x54
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	effffffe 	.word	0xeffffffe

08006200 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_UARTEx_DisableFifoMode+0x16>
 8006212:	2302      	movs	r3, #2
 8006214:	e027      	b.n	8006266 <HAL_UARTEx_DisableFifoMode+0x66>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006244:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006286:	2302      	movs	r3, #2
 8006288:	e02d      	b.n	80062e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2224      	movs	r2, #36	; 0x24
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f850 	bl	800636c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006302:	2302      	movs	r3, #2
 8006304:	e02d      	b.n	8006362 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2224      	movs	r2, #36	; 0x24
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f812 	bl	800636c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800638c:	e031      	b.n	80063f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800638e:	2310      	movs	r3, #16
 8006390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006392:	2310      	movs	r3, #16
 8006394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	0e5b      	lsrs	r3, r3, #25
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	0f5b      	lsrs	r3, r3, #29
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	7b3a      	ldrb	r2, [r7, #12]
 80063ba:	4911      	ldr	r1, [pc, #68]	; (8006400 <UARTEx_SetNbDataToProcess+0x94>)
 80063bc:	5c8a      	ldrb	r2, [r1, r2]
 80063be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063c2:	7b3a      	ldrb	r2, [r7, #12]
 80063c4:	490f      	ldr	r1, [pc, #60]	; (8006404 <UARTEx_SetNbDataToProcess+0x98>)
 80063c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	7b7a      	ldrb	r2, [r7, #13]
 80063d8:	4909      	ldr	r1, [pc, #36]	; (8006400 <UARTEx_SetNbDataToProcess+0x94>)
 80063da:	5c8a      	ldrb	r2, [r1, r2]
 80063dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063e0:	7b7a      	ldrb	r2, [r7, #13]
 80063e2:	4908      	ldr	r1, [pc, #32]	; (8006404 <UARTEx_SetNbDataToProcess+0x98>)
 80063e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	08006ab8 	.word	0x08006ab8
 8006404:	08006ac0 	.word	0x08006ac0

08006408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006408:	b084      	sub	sp, #16
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	f107 001c 	add.w	r0, r7, #28
 8006416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800641e:	2b01      	cmp	r3, #1
 8006420:	d121      	bne.n	8006466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <USB_CoreInit+0xdc>)
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 faaa 	bl	80069b4 <USB_CoreReset>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e01b      	b.n	800649e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa9e 	bl	80069b4 <USB_CoreReset>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800647c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
 8006490:	e005      	b.n	800649e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800649e:	7fbb      	ldrb	r3, [r7, #30]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d116      	bne.n	80064d2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <USB_CoreInit+0xe0>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f043 0206 	orr.w	r2, r3, #6
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f043 0220 	orr.w	r2, r3, #32
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064de:	b004      	add	sp, #16
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	ffbdffbf 	.word	0xffbdffbf
 80064e8:	03ee0000 	.word	0x03ee0000

080064ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f023 0201 	bic.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d115      	bne.n	800655c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800653c:	200a      	movs	r0, #10
 800653e:	f7fa fee1 	bl	8001304 <HAL_Delay>
      ms += 10U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	330a      	adds	r3, #10
 8006546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa25 	bl	8006998 <USB_GetMode>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d01e      	beq.n	8006592 <USB_SetCurrentMode+0x84>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2bc7      	cmp	r3, #199	; 0xc7
 8006558:	d9f0      	bls.n	800653c <USB_SetCurrentMode+0x2e>
 800655a:	e01a      	b.n	8006592 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d115      	bne.n	800658e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800656e:	200a      	movs	r0, #10
 8006570:	f7fa fec8 	bl	8001304 <HAL_Delay>
      ms += 10U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	330a      	adds	r3, #10
 8006578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa0c 	bl	8006998 <USB_GetMode>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <USB_SetCurrentMode+0x84>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2bc7      	cmp	r3, #199	; 0xc7
 800658a:	d9f0      	bls.n	800656e <USB_SetCurrentMode+0x60>
 800658c:	e001      	b.n	8006592 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e005      	b.n	800659e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2bc8      	cmp	r3, #200	; 0xc8
 8006596:	d101      	bne.n	800659c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a8:	b084      	sub	sp, #16
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e009      	b.n	80065dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3340      	adds	r3, #64	; 0x40
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b0e      	cmp	r3, #14
 80065e0:	d9f2      	bls.n	80065c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d11c      	bne.n	8006624 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e005      	b.n	8006630 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006636:	461a      	mov	r2, r3
 8006638:	2300      	movs	r3, #0
 800663a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800663c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006640:	2b01      	cmp	r3, #1
 8006642:	d10d      	bne.n	8006660 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f968 	bl	8006924 <USB_SetDevSpeed>
 8006654:	e008      	b.n	8006668 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006656:	2101      	movs	r1, #1
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f963 	bl	8006924 <USB_SetDevSpeed>
 800665e:	e003      	b.n	8006668 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006660:	2103      	movs	r1, #3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f95e 	bl	8006924 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006668:	2110      	movs	r1, #16
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8fa 	bl	8006864 <USB_FlushTxFifo>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f924 	bl	80068c8 <USB_FlushRxFifo>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	461a      	mov	r2, r3
 800669e:	2300      	movs	r3, #0
 80066a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	e043      	b.n	800673c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ca:	d118      	bne.n	80066fe <USB_DevInit+0x156>
    {
      if (i == 0U)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	461a      	mov	r2, r3
 80066e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e013      	b.n	8006710 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	461a      	mov	r2, r3
 80066f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e008      	b.n	8006710 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	461a      	mov	r2, r3
 8006730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006734:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3301      	adds	r3, #1
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006740:	461a      	mov	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4293      	cmp	r3, r2
 8006746:	d3b5      	bcc.n	80066b4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e043      	b.n	80067d6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d118      	bne.n	8006798 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	461a      	mov	r2, r3
 800677a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e013      	b.n	80067aa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e008      	b.n	80067aa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	2300      	movs	r3, #0
 80067ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3301      	adds	r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067da:	461a      	mov	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d3b5      	bcc.n	800674e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006802:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f043 0210 	orr.w	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <USB_DevInit+0x2b4>)
 800681e:	4313      	orrs	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006824:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f043 0208 	orr.w	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800683c:	2b01      	cmp	r3, #1
 800683e:	d105      	bne.n	800684c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <USB_DevInit+0x2b8>)
 8006846:	4313      	orrs	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006858:	b004      	add	sp, #16
 800685a:	4770      	bx	lr
 800685c:	803c3800 	.word	0x803c3800
 8006860:	40000004 	.word	0x40000004

08006864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800687e:	d901      	bls.n	8006884 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e01b      	b.n	80068bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	daf2      	bge.n	8006872 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	019b      	lsls	r3, r3, #6
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80068a8:	d901      	bls.n	80068ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e006      	b.n	80068bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d0f0      	beq.n	800689c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80068e0:	d901      	bls.n	80068e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e018      	b.n	8006918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	daf2      	bge.n	80068d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2210      	movs	r2, #16
 80068f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006904:	d901      	bls.n	800690a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e006      	b.n	8006918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b10      	cmp	r3, #16
 8006914:	d0f0      	beq.n	80068f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0301 	and.w	r3, r3, #1
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069cc:	d901      	bls.n	80069d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e01b      	b.n	8006a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	daf2      	bge.n	80069c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069f6:	d901      	bls.n	80069fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e006      	b.n	8006a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d0f0      	beq.n	80069ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <memset>:
 8006a16:	4402      	add	r2, r0
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d100      	bne.n	8006a20 <memset+0xa>
 8006a1e:	4770      	bx	lr
 8006a20:	f803 1b01 	strb.w	r1, [r3], #1
 8006a24:	e7f9      	b.n	8006a1a <memset+0x4>
	...

08006a28 <__libc_init_array>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	4d0d      	ldr	r5, [pc, #52]	; (8006a60 <__libc_init_array+0x38>)
 8006a2c:	4c0d      	ldr	r4, [pc, #52]	; (8006a64 <__libc_init_array+0x3c>)
 8006a2e:	1b64      	subs	r4, r4, r5
 8006a30:	10a4      	asrs	r4, r4, #2
 8006a32:	2600      	movs	r6, #0
 8006a34:	42a6      	cmp	r6, r4
 8006a36:	d109      	bne.n	8006a4c <__libc_init_array+0x24>
 8006a38:	4d0b      	ldr	r5, [pc, #44]	; (8006a68 <__libc_init_array+0x40>)
 8006a3a:	4c0c      	ldr	r4, [pc, #48]	; (8006a6c <__libc_init_array+0x44>)
 8006a3c:	f000 f818 	bl	8006a70 <_init>
 8006a40:	1b64      	subs	r4, r4, r5
 8006a42:	10a4      	asrs	r4, r4, #2
 8006a44:	2600      	movs	r6, #0
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	d105      	bne.n	8006a56 <__libc_init_array+0x2e>
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a50:	4798      	blx	r3
 8006a52:	3601      	adds	r6, #1
 8006a54:	e7ee      	b.n	8006a34 <__libc_init_array+0xc>
 8006a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5a:	4798      	blx	r3
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	e7f2      	b.n	8006a46 <__libc_init_array+0x1e>
 8006a60:	08006ad0 	.word	0x08006ad0
 8006a64:	08006ad0 	.word	0x08006ad0
 8006a68:	08006ad0 	.word	0x08006ad0
 8006a6c:	08006ad4 	.word	0x08006ad4

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr
